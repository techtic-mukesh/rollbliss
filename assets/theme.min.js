window.theme = window.theme || {};
window.Shopify = window.Shopify || {};
theme.config = {
    bpSmall: !1,
    hasSessionStorage: !0,
    hasLocalStorage: !0,
    mediaQuerySmall: "screen and (max-width: 769px)",
    youTubeReady: !1,
    vimeoReady: !1,
    vimeoLoading: !1,
    isTouch: "ontouchstart" in window || (window.DocumentTouch && window.document instanceof DocumentTouch) || window.navigator.maxTouchPoints || window.navigator.msMaxTouchPoints ? !0 : !1,
    stickyHeader: !1,
    rtl: "rtl" == document.documentElement.getAttribute("dir") ? !0 : !1,
};
theme.config.isTouch && (document.documentElement.className += " supports-touch");
console && console.log && console.log("ICONIC theme (" + theme.settings.themeVersion + ") by ARCH\u039eTYPE | Learn more at ");
theme.recentlyViewed = { recent: {}, productInfo: {} };
window.lazySizesConfig = window.lazySizesConfig || {};
lazySizesConfig.expFactor = 4;
(function () {
    function G() {
        var d, b;
        return new Promise((a, c) => {
            d = setInterval(function () {
                Vimeo && (clearInterval(d), clearTimeout(b), a());
            }, 500);
            b = setTimeout(function () {
                clearInterval(d);
                c();
            }, 4e3);
        });
    }
    theme.delegate = {
        on: function (d, b, a) {
            this.namespaces || (this.namespaces = {});
            this.namespaces[d] = b;
            a = a || !1;
            this.addEventListener(d.split(".")[0], b, a);
            return this;
        },
        off: function (d) {
            if (this.namespaces) return this.removeEventListener(d.split(".")[0], this.namespaces[d]), delete this.namespaces[d], this;
        },
    };
    window.on = Element.prototype.on = theme.delegate.on;
    window.off = Element.prototype.off = theme.delegate.off;
    theme.utils = {
        defaultTo: function (d, b) {
            return null == d || d !== d ? b : d;
        },
        wrap: function (d, b) {
            d.parentNode.insertBefore(b, d);
            b.appendChild(d);
        },
        debounce: function (d, b, a) {
            var c;
            return function () {
                var e = this,
                    f = arguments,
                    g = a && !c;
                clearTimeout(c);
                c = setTimeout(function () {
                    c = null;
                    a || b.apply(e, f);
                }, d);
                g && b.apply(e, f);
            };
        },
        throttle: function (d, b) {
            var a = !1;
            return function () {
                a ||
                    (b.apply(this, arguments),
                    (a = !0),
                    setTimeout(function () {
                        a = !1;
                    }, d));
            };
        },
        prepareTransition: function (d, b) {
            function a(c) {
                d.classList.remove("is-transitioning");
                d.removeEventListener("transitionend", a);
            }
            d.addEventListener("transitionend", a);
            d.classList.add("is-transitioning");
            d.offsetWidth;
            "function" === typeof b && b();
        },
        compact: function (d) {
            for (var b = -1, a = null == d ? 0 : d.length, c = 0, e = []; ++b < a; ) {
                var f = d[b];
                f && (e[c++] = f);
            }
            return e;
        },
        serialize: function (d) {
            var b = [];
            Array.prototype.slice.call(d.elements).forEach(function (a) {
                !a.name ||
                    a.disabled ||
                    -1 < ["file", "reset", "submit", "button"].indexOf(a.type) ||
                    ("select-multiple" === a.type
                        ? Array.prototype.slice.call(a.options).forEach(function (c) {
                              c.selected && b.push(encodeURIComponent(a.name) + "=" + encodeURIComponent(c.value));
                          })
                        : (-1 < ["checkbox", "radio"].indexOf(a.type) && !a.checked) || b.push(encodeURIComponent(a.name) + "=" + encodeURIComponent(a.value)));
            });
            return b.join("&");
        },
    };
    theme.a11y = {
        trapFocus: function (d) {
            var b = d.namespace ? "focusin." + d.namespace : "focusin",
                a = d.namespace ? "focusout." + d.namespace : "focusout",
                c = d.namespace ? "keydown." + d.namespace : "keydown.handleFocus",
                e = d.container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])');
            e = [].slice.call(e).filter((h) => null !== h.offsetParent);
            var f = e[0],
                g = e[e.length - 1];
            d.elementToFocus || (d.elementToFocus = d.container);
            d.container.setAttribute("tabindex", "-1");
            d.elementToFocus.focus();
            document.documentElement.off("focusin");
            document.documentElement.on(a, function () {
                document.documentElement.off(c);
            });
            document.documentElement.on(b, function (h) {
                if (h.target === g || h.target === f)
                    document.documentElement.on(c, function (m) {
                        9 === m.keyCode && m.target === f && m.shiftKey && (m.preventDefault(), g.focus());
                    });
            });
        },
        removeTrapFocus: function (d) {
            var b = d.namespace ? "focusin." + d.namespace : "focusin";
            d.container && d.container.removeAttribute("tabindex");
            document.documentElement.off(b);
        },
        lockMobileScrolling: function (d, b) {
            b = b ? b : document.documentElement;
            document.documentElement.classList.add("lock-scroll");
            b.on("touchmove" + d, function () {
                return !0;
            });
        },
        unlockMobileScrolling: function (d, b) {
            document.documentElement.classList.remove("lock-scroll");
            (b ? b : document.documentElement).off("touchmove" + d);
        },
    };
    document.documentElement.on("keyup.tab", function (d) {
        9 === d.keyCode && (document.documentElement.classList.add("tab-outline"), document.documentElement.off("keyup.tab"));
    });
    theme.Currency = (function () {
        var d = theme && theme.settings && theme.settings.superScriptPrice;
        return {
            formatMoney: function (b, a) {
                function c(g, h, m, n) {
                    h = theme.utils.defaultTo(h, 2);
                    m = theme.utils.defaultTo(m, ",");
                    n = theme.utils.defaultTo(n, ".");
                    if (isNaN(g) || null == g) return 0;
                    g = (g / 100).toFixed(h);
                    g = g.split(".");
                    return g[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + m) + (g[1] ? n + g[1] : "");
                }
                a || (a = theme.settings.moneyFormat);
                "string" === typeof b && (b = b.replace(".", ""));
                var e = "",
                    f = /\{\{\s*(\w+)\s*\}\}/;
                a = a || "${{amount}}";
                switch (a.match(f)[1]) {
                    case "amount":
                        e = c(b, 2);
                        d && e && e.includes(".") && (e = e.replace(".", "<sup>") + "</sup>");
                        break;
                    case "amount_no_decimals":
                        e = c(b, 0);
                        break;
                    case "amount_with_comma_separator":
                        e = c(b, 2, ".", ",");
                        d && e && e.includes(".") && (e = e.replace(",", "<sup>") + "</sup>");
                        break;
                    case "amount_no_decimals_with_comma_separator":
                        e = c(b, 0, ".", ",");
                        break;
                    case "amount_no_decimals_with_space_separator":
                        e = c(b, 0, " ");
                }
                return a.replace(f, e);
            },
            getBaseUnit: function (b) {
                if (b && b.unit_price_measurement && b.unit_price_measurement.reference_value)
                    return 1 === b.unit_price_measurement.reference_value ? b.unit_price_measurement.reference_unit : b.unit_price_measurement.reference_value + b.unit_price_measurement.reference_unit;
            },
        };
    })();
    theme.Images = (function () {
        return {
            imageSize: function (d) {
                if (!d) return "620x";
                d = d.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);
                return null !== d ? d[1] : null;
            },
            getSizedImageUrl: function (d, b) {
                if (!d || null == b) return d;
                if ("master" === b) return this.removeProtocol(d);
                var a = d.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);
                return null != a ? ((d = d.split(a[0])), this.removeProtocol(d[0] + "_" + b + a[0])) : null;
            },
            removeProtocol: function (d) {
                return d.replace(/http(s)?:/, "");
            },
            lazyloadImagePath: function (d) {
                var b;
                null !== d && (b = d.replace(/(\.[^.]*)$/, "_{width}x$1"));
                return b;
            },
        };
    })();
    theme.loadImageSection = function (d) {
        function b() {
            d.classList.remove("loading", "loading--delayed");
            d.classList.add("loaded");
        }
        if (d.querySelector("svg")) b();
        else if (d.querySelector(".lazyloaded")) b();
        else
            var a = setInterval(function () {
                d.querySelector(".lazyloaded") && (clearInterval(a), b());
            }, 25);
    };
    theme.initWhenVisible = function (d) {
        new IntersectionObserver(
            (b, a) => {
                b.forEach((c) => {
                    c.isIntersecting && "function" === typeof d.callback && (d.callback(), a.unobserve(c.target));
                });
            },
            { rootMargin: "0px 0px " + (d.threshold ? d.threshold : 0) + "px 0px" }
        ).observe(d.element);
    };
    theme.LibraryLoader = (function () {
        function d(e, f) {
            var g = document.createElement("script");
            g.src = e.src;
            g.addEventListener("load", function () {
                e.status = a.loaded;
                f();
            });
            return g;
        }
        function b(e, f) {
            var g = document.createElement("link");
            g.href = e.src;
            g.rel = "stylesheet";
            g.type = "text/css";
            g.addEventListener("load", function () {
                e.status = a.loaded;
                f();
            });
            return g;
        }
        var a = { requested: "requested", loaded: "loaded" },
            c = {
                youtubeSdk: { tagId: "youtube-sdk", src: "https://www.youtube.com/iframe_api", type: "script" },
                vimeo: { tagId: "vimeo-api", src: "https://player.vimeo.com/api/player.js", type: "script" },
                shopifyXr: { tagId: "shopify-model-viewer-xr", src: "https://cdn.shopify.com/shopifycloud/shopify-xr-js/assets/v1.0/shopify-xr.en.js", type: "script" },
                modelViewerUi: { tagId: "shopify-model-viewer-ui", src: "https://cdn.shopify.com/shopifycloud/model-viewer-ui/assets/v1.0/model-viewer-ui.en.js", type: "script" },
                modelViewerUiStyles: { tagId: "shopify-model-viewer-ui-styles", src: "https://cdn.shopify.com/shopifycloud/model-viewer-ui/assets/v1.0/model-viewer-ui.css", type: "link" },
            };
        return {
            load: function (e, f) {
                if ((e = c[e]) && e.status !== a.requested)
                    if (((f = f || function () {}), e.status === a.loaded)) f();
                    else {
                        e.status = a.requested;
                        switch (e.type) {
                            case "script":
                                var g = d(e, f);
                                break;
                            case "link":
                                g = b(e, f);
                        }
                        g.id = e.tagId;
                        e.element = g;
                        f = document.getElementsByTagName(e.type)[0];
                        f.parentNode.insertBefore(g, f);
                    }
            },
        };
    })();
    theme.rteInit = function () {
        function d(b) {
            b.src = b.src;
            var a = document.createElement("div");
            a.classList.add("video-wrapper");
            theme.utils.wrap(b, a);
        }
        document.querySelectorAll(".rte table").forEach((b) => {
            var a = document.createElement("div");
            a.classList.add("table-wrapper");
            theme.utils.wrap(b, a);
        });
        document.querySelectorAll('.rte iframe[src*="youtube.com/embed"]').forEach((b) => {
            d(b);
        });
        document.querySelectorAll('.rte iframe[src*="player.vimeo"]').forEach((b) => {
            d(b);
        });
        document.querySelectorAll(".rte a img").forEach((b) => {
            b.parentNode.classList.add("rte__image");
        });
    };
    theme.Sections = function () {
        this.constructors = {};
        this.instances = [];
        document.addEventListener("shopify:section:load", this._onSectionLoad.bind(this));
        document.addEventListener("shopify:section:unload", this._onSectionUnload.bind(this));
        document.addEventListener("shopify:section:select", this._onSelect.bind(this));
        document.addEventListener("shopify:section:deselect", this._onDeselect.bind(this));
        document.addEventListener("shopify:block:select", this._onBlockSelect.bind(this));
        document.addEventListener("shopify:block:deselect", this._onBlockDeselect.bind(this));
    };
    theme.Sections.prototype = Object.assign({}, theme.Sections.prototype, {
        _createInstance: function (d, b, a) {
            var c = d.getAttribute("data-section-id"),
                e = d.getAttribute("data-section-type");
            b = b || this.constructors[e];
            if ("undefined" !== typeof b) {
                a && this._findInstance(c) && this._removeInstance(c);
                try {
                    var f = Object.assign(new b(d), { id: c, type: e, container: d });
                    this.instances.push(f);
                } catch (g) {
                    console.error(g);
                }
            }
        },
        _findInstance: function (d) {
            for (var b = 0; b < this.instances.length; b++) if (this.instances[b].id === d) return this.instances[b];
        },
        _removeInstance: function (d) {
            for (var b = this.instances.length, a; b--; )
                if (this.instances[b].id === d) {
                    a = this.instances[b];
                    this.instances.splice(b, 1);
                    break;
                }
            return a;
        },
        _onSectionLoad: function (d, b, a) {
            window.AOS && AOS.refreshHard();
            theme && theme.initGlobals && theme.initGlobals();
            var c = b ? b : d.target,
                e = b ? b : d.target.querySelector("[data-section-id]");
            if (e) {
                this._createInstance(e);
                b = b ? a : this._findInstance(d.detail.sectionId);
                c.querySelectorAll("[data-subsection]").length && this.loadSubSections(c);
                if (b && "function" === typeof b.onLoad) b.onLoad(d);
                setTimeout(function () {
                    window.dispatchEvent(new Event("scroll"));
                }, 200);
            }
        },
        _onSectionUnload: function (d) {
            this.instances = this.instances.filter(function (b) {
                var a = b.id === d.detail.sectionId;
                if (a && "function" === typeof b.onUnload) b.onUnload(d);
                return !a;
            });
        },
        loadSubSections: function (d) {
            d &&
                d.querySelectorAll("[data-section-id]").forEach((b) => {
                    this._onSectionLoad(null, b, b.dataset.sectionId);
                });
        },
        _onSelect: function (d) {
            var b = this._findInstance(d.detail.sectionId);
            if ("undefined" !== typeof b && "function" === typeof b.onSelect) b.onSelect(d);
        },
        _onDeselect: function (d) {
            var b = this._findInstance(d.detail.sectionId);
            if ("undefined" !== typeof b && "function" === typeof b.onDeselect) b.onDeselect(d);
        },
        _onBlockSelect: function (d) {
            var b = this._findInstance(d.detail.sectionId);
            if ("undefined" !== typeof b && "function" === typeof b.onBlockSelect) b.onBlockSelect(d);
        },
        _onBlockDeselect: function (d) {
            var b = this._findInstance(d.detail.sectionId);
            if ("undefined" !== typeof b && "function" === typeof b.onBlockDeselect) b.onBlockDeselect(d);
        },
        register: function (d, b, a) {
            this.constructors[d] = b;
            var c = document.querySelectorAll('[data-section-type="' + d + '"]');
            a && (c = a.querySelectorAll('[data-section-type="' + d + '"]'));
            c.forEach(
                function (e) {
                    this._createInstance(e, b, a);
                }.bind(this)
            );
        },
        reinit: function (d) {
            for (var b = 0; b < this.instances.length; b++) {
                var a = this.instances[b];
                a.type === d && "function" === typeof a.forceReload && a.forceReload();
            }
        },
    });
    theme.Variants = (function () {
        function d(b) {
            this.container = b.container;
            this.variants = b.variants;
            this.singleOptionSelector = b.singleOptionSelector;
            this.originalSelectorId = b.originalSelectorId;
            this.enableHistoryState = b.enableHistoryState;
            this.currentlySelectedValues = this._getCurrentOptions();
            this.currentVariant = this._getVariantFromOptions();
            this.container.querySelectorAll(this.singleOptionSelector).forEach((a) => {
                a.addEventListener("change", this._onSelectChange.bind(this));
            });
        }
        d.prototype = Object.assign({}, d.prototype, {
            _getCurrentOptions: function () {
                var b = [];
                this.container.querySelectorAll(this.singleOptionSelector).forEach((a) => {
                    var c = a.getAttribute("type");
                    "radio" === c || "checkbox" === c ? a.checked && b.push({ value: a.value, index: a.dataset.index }) : b.push({ value: a.value, index: a.dataset.index });
                });
                return (b = theme.utils.compact(b));
            },
            _numberFromOptionKey: function (b) {
                return parseInt(b.substr(-1));
            },
            _getWeightedOptionMatchCount: function (b) {
                return this._getCurrentOptions().reduce((a, { value: c, index: e }) => {
                    const f = this._numberFromOptionKey(e);
                    return b[e] === c ? a + (4 - f) : a;
                }, 0);
            },
            _getFullMatch(b) {
                const a = this._getCurrentOptions();
                return this.variants.find((c) => {
                    const e = a.every(({ value: f, index: g }) => c[g] === f);
                    return b ? e && c.available : e;
                });
            },
            _getClosestAvailableMatch: function (b) {
                if (!b) return null;
                const a = this._getCurrentOptions(),
                    c = this.variants;
                return (b && c.filter((e) => a.filter(({ index: f }) => this._numberFromOptionKey(f) <= this._numberFromOptionKey(b.index)).every(({ value: f, index: g }) => e[g] === f) && e.available)).reduce((e, f) => {
                    if (null === e) return f;
                    const g = this._getWeightedOptionMatchCount(e, b);
                    return this._getWeightedOptionMatchCount(f, b) > g ? f : e;
                }, null);
            },
            _getVariantFromOptions: function (b) {
                const a = this._getFullMatch(!0);
                b = this._getClosestAvailableMatch(b);
                const c = this._getFullMatch(!1);
                return a || b || c || null;
            },
            _updateInputState: function (b, a) {
                return (c) => {
                    if (null !== b) {
                        var e = c.dataset.index,
                            f = c.value,
                            g = c.getAttribute("type");
                        if ("radio" === g || "checkbox" === g) c.checked = b[e] === f;
                    }
                };
            },
            _onSelectChange: function ({ srcElement: b }) {
                var a = this.container.querySelectorAll(this.singleOptionSelector);
                const c = this._getVariantFromOptions({ index: b.dataset.index, value: b.value });
                a.forEach(this._updateInputState(c, b));
                a = this.currentlySelectedValues = this._getCurrentOptions();
                b = { variant: c, currentlySelectedValues: a, value: b.value, index: b.parentElement.dataset.index };
                this.container.dispatchEvent(new CustomEvent("variantChange", { detail: b }));
                document.dispatchEvent(new CustomEvent("variant:change", { detail: b }));
                c && (this._updateMasterSelect(c), this._updateImages(c), this._updatePrice(c), this._updateUnitPrice(c), this._updateSKU(c), (this.currentVariant = c), this.enableHistoryState && this._updateHistoryState(c));
            },
            _updateImages: function (b) {
                var a = b.featured_image || {},
                    c = (this.currentVariant && this.currentVariant.featured_image) || {};
                b.featured_image && a.src !== c.src && this.container.dispatchEvent(new CustomEvent("variantImageChange", { detail: { variant: b } }));
            },
            _updatePrice: function (b) {
                (this.currentVariant && b.price === this.currentVariant.price && b.compare_at_price === this.currentVariant.compare_at_price) ||
                    this.container.dispatchEvent(new CustomEvent("variantPriceChange", { detail: { variant: b } }));
            },
            _updateUnitPrice: function (b) {
                (this.currentVariant && b.unit_price === this.currentVariant.unit_price) || this.container.dispatchEvent(new CustomEvent("variantUnitPriceChange", { detail: { variant: b } }));
            },
            _updateSKU: function (b) {
                (this.currentVariant && b.sku === this.currentVariant.sku) || this.container.dispatchEvent(new CustomEvent("variantSKUChange", { detail: { variant: b } }));
            },
            _updateHistoryState: function (b) {
                history.replaceState && b && ((b = window.location.protocol + "//" + window.location.host + window.location.pathname + "?variant=" + b.id), window.history.replaceState({ path: b }, "", b));
            },
            _updateMasterSelect: function (b) {
                this.container.querySelector(this.originalSelectorId).value = b.id;
                this.container.querySelector(this.originalSelectorId).dispatchEvent(new Event("change", { bubbles: !0 }));
            },
        });
        return d;
    })();
    window.vimeoApiReady = function () {
        theme.config.vimeoLoading = !0;
        G().then(function () {
            theme.config.vimeoReady = !0;
            theme.config.vimeoLoading = !1;
            document.dispatchEvent(new CustomEvent("vimeoReady"));
        });
    };
    theme.VimeoPlayer = (function () {
        function d(a, c, e) {
            this.divId = a;
            this.el = document.getElementById(a);
            this.videoId = c;
            this.iframe = null;
            (this.options = e) && this.options.videoParent && (this.parent = this.el.closest(this.options.videoParent));
            this.setAsLoading();
            theme.config.vimeoReady ? this.init() : (theme.LibraryLoader.load("vimeo", window.vimeoApiReady), document.addEventListener("vimeoReady", this.init.bind(this)));
        }
        var b = { background: !0, byline: !1, controls: !1, loop: !0, muted: !0, playsinline: !0, portrait: !1, title: !1 };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                b.id = this.videoId;
                this.videoPlayer = new Vimeo.Player(this.el, b);
                this.videoPlayer.ready().then(this.playerReady.bind(this));
            },
            playerReady: function () {
                this.iframe = this.el.querySelector("iframe");
                this.iframe.setAttribute("tabindex", "-1");
                this.videoPlayer.setMuted(!0);
                this.setAsLoaded();
                new IntersectionObserver(
                    (a, c) => {
                        a.forEach((e) => {
                            e.isIntersecting ? this.play() : this.pause();
                        });
                    },
                    { rootMargin: "0px 0px 50px 0px" }
                ).observe(this.iframe);
            },
            setAsLoading: function () {
                this.parent && this.parent.classList.add("loading");
            },
            setAsLoaded: function () {
                this.parent && (this.parent.classList.remove("loading"), this.parent.classList.add("loaded"), Shopify && Shopify.designMode && window.AOS && AOS.refreshHard());
            },
            enableInteraction: function () {
                this.parent && this.parent.classList.add("video-interactable");
            },
            play: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.play && this.videoPlayer.play();
            },
            pause: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.pause && this.videoPlayer.pause();
            },
            destroy: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.destroy && this.videoPlayer.destroy();
            },
        });
        return d;
    })();
    window.onYouTubeIframeAPIReady = function () {
        theme.config.youTubeReady = !0;
        document.dispatchEvent(new CustomEvent("youTubeReady"));
    };
    theme.YouTube = (function () {
        function d(a, c) {
            this.divId = a;
            this.iframe = null;
            this.attemptedToPlay = !1;
            b.events = { onReady: this.onVideoPlayerReady.bind(this), onStateChange: this.onVideoStateChange.bind(this) };
            if ((this.options = Object.assign({}, b, c)))
                this.options.videoParent && (this.parent = document.getElementById(this.divId).closest(this.options.videoParent)),
                    this.options.autoplay || (this.options.playerVars.autoplay = this.options.autoplay),
                    "sound" === this.options.style && ((this.options.playerVars.controls = 1), (this.options.playerVars.autoplay = 0));
            this.setAsLoading();
            theme.config.youTubeReady ? this.init() : (theme.LibraryLoader.load("youtubeSdk"), document.addEventListener("youTubeReady", this.init.bind(this)));
        }
        var b = { width: 1280, height: 720, playerVars: { autohide: 0, autoplay: 1, cc_load_policy: 0, controls: 0, fs: 0, iv_load_policy: 3, modestbranding: 1, playsinline: 1, rel: 0 } };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.videoPlayer = new YT.Player(this.divId, this.options);
            },
            onVideoPlayerReady: function (a) {
                this.iframe = document.getElementById(this.divId);
                this.iframe.setAttribute("tabindex", "-1");
                "sound" !== this.options.style && a.target.mute();
                new IntersectionObserver(
                    (c, e) => {
                        c.forEach((f) => {
                            f.isIntersecting ? this.play() : this.pause();
                        });
                    },
                    { rootMargin: "0px 0px 50px 0px" }
                ).observe(this.iframe);
            },
            onVideoStateChange: function (a) {
                switch (a.data) {
                    case -1:
                        this.attemptedToPlay && (this.setAsLoaded(), this.enableInteraction());
                        break;
                    case 0:
                        this.play(a);
                        break;
                    case 1:
                        this.setAsLoaded();
                        break;
                    case 3:
                        this.attemptedToPlay = !0;
                }
            },
            setAsLoading: function () {
                this.parent && this.parent.classList.add("loading");
            },
            setAsLoaded: function () {
                this.parent && (this.parent.classList.remove("loading"), this.parent.classList.add("loaded"), Shopify && Shopify.designMode && window.AOS && AOS.refreshHard());
            },
            enableInteraction: function () {
                this.parent && this.parent.classList.add("video-interactable");
            },
            play: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.playVideo && this.videoPlayer.playVideo();
            },
            pause: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.pauseVideo && this.videoPlayer.pauseVideo();
            },
            destroy: function () {
                this.videoPlayer && "function" === typeof this.videoPlayer.destroy && this.videoPlayer.destroy();
            },
        });
        return d;
    })();
    (function () {
        var d,
            b = !1;
        document.body.addEventListener("touchstart", function (a) {
            if (!a.target.closest(".flickity-slider")) return (b = !1);
            b = !0;
            d = a.touches[0].pageX;
        });
        document.body.addEventListener(
            "touchmove",
            function (a) {
                b && a.cancelable && Math.abs(a.touches[0].pageX - d) > Flickity.defaults.dragThreshold && a.preventDefault();
            },
            { passive: !1 }
        );
    })();
    theme.AjaxRenderer = (function () {
        function d({ sections: b, onReplace: a, debug: c } = {}) {
            this.sections = b || [];
            this.cachedSections = [];
            this.onReplace = a;
            this.debug = !!c;
        }
        d.prototype = Object.assign({}, d.prototype, {
            renderPage: function (b, a, c = !0) {
                const e = new URLSearchParams(window.location.search),
                    f = this.getUpdatedParams(e, a);
                a = this.sections.map((g) => {
                    const h = `${b}?section_id=${g.sectionId}&${f.toString()}`,
                        m = (n) => n.url === h;
                    return this.cachedSections.some(m) ? this.renderSectionFromCache(m, g) : this.renderSectionFromFetch(h, g);
                });
                c && this.updateURLHash(f);
                return Promise.all(a);
            },
            renderSectionFromCache: function (b, a) {
                b = this.cachedSections.find(b);
                this.log(`[AjaxRenderer] rendering from cache: url=${b.url}`);
                this.renderSection(b.html, a);
                return Promise.resolve(a);
            },
            renderSectionFromFetch: function (b, a) {
                this.log(`[AjaxRenderer] redering from fetch: url=${b}`);
                return new Promise((c, e) => {
                    fetch(b)
                        .then((f) => f.text())
                        .then((f) => {
                            this.cachedSections = [...this.cachedSections, { html: f, url: b }];
                            this.renderSection(f, a);
                            c(a);
                        })
                        .catch((f) => e(f));
                });
            },
            renderSection: function (b, a) {
                this.log(`[AjaxRenderer] rendering section: section=${JSON.stringify(a)}`);
                const c = new DOMParser().parseFromString(b, "text/html");
                if (this.onReplace) this.onReplace(c, a);
                else if ("string" === typeof a.nodeId) {
                    b = c.getElementById(a.nodeId);
                    if (!b) return;
                    document.getElementById(a.nodeId).innerHTML = b.innerHTML;
                } else
                    a.nodeId.forEach((e) => {
                        document.getElementById(e).innerHTML = c.getElementById(e).innerHTML;
                    });
                return a;
            },
            getUpdatedParams: function (b, a) {
                b = new URLSearchParams(b);
                const c = ["sort_by", "q", "options[prefix]", "type"];
                for (const [e, f] of b.entries()) a.getAll(e).includes(f) || c.includes(e) || b.delete(e);
                for (const [e, f] of a.entries()) b.getAll(e).includes(f) || "" === f || b.append(e, f);
                return b;
            },
            updateURLHash: function (b) {
                history.pushState({}, "", `${window.location.pathname}${b && "?".concat(b)}`);
            },
            log: function (...b) {
                this.debug && console.log(...b);
            },
        });
        return d;
    })();
    window.Shopify &&
        window.Shopify.theme &&
        navigator &&
        navigator.sendBeacon &&
        window.Shopify.designMode &&
        navigator.sendBeacon(
            "https://api.archetypethemes.co/api/beacon",
            new URLSearchParams({
                shop: window.Shopify.shop,
                themeName: window.theme && window.theme.settings && `${window.theme.settings.themeName} v${window.theme.settings.themeVersion}`,
                role: window.Shopify.theme.role,
                route: window.location.pathname,
                themeId: window.Shopify.theme.id,
                themeStoreId: window.Shopify.theme.theme_store_id || 0,
                isThemeEditor: !!window.Shopify.designMode,
            })
        );
    theme.cart = {
        getCart: function () {
            var d = "".concat(theme.routes.cart, "?t=").concat(Date.now());
            return fetch(d, { credentials: "same-origin", method: "GET" }).then((b) => b.json());
        },
        getCartProductMarkup: function () {
            var d = "".concat(theme.routes.cartPage, "?t=").concat(Date.now());
            d = -1 === d.indexOf("?") ? d + "?view=ajax" : d + "&view=ajax";
            return fetch(d, { credentials: "same-origin", method: "GET" }).then(function (b) {
                return b.text();
            });
        },
        changeItem: function (d, b) {
            return this._updateCart({ url: "".concat(theme.routes.cartChange, "?t=").concat(Date.now()), data: JSON.stringify({ id: d, quantity: b }) });
        },
        _updateCart: function (d) {
            return fetch(d.url, { method: "POST", body: d.data, credentials: "same-origin", headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" } })
                .then((b) => b.json())
                .then(function (b) {
                    return b;
                });
        },
        updateAttribute: function (d, b) {
            return this._updateCart({ url: "/cart/update.js", data: JSON.stringify({ attributes: { [d]: theme.cart.attributeToString(b) } }) });
        },
        updateNote: function (d) {
            return this._updateCart({ url: "/cart/update.js", data: JSON.stringify({ note: theme.cart.attributeToString(d) }) });
        },
        attributeToString: function (d) {
            "string" !== typeof d && ((d += ""), "undefined" === d && (d = ""));
            return d.trim();
        },
    };
    theme.CartForm = (function () {
        function d(c) {
            c &&
                ((this.form = c),
                (this.wrapper = c.parentNode),
                (this.location = c.dataset.location),
                (this.namespace = ".cart-" + this.location),
                (this.products = c.querySelector(b.products)),
                (this.submitBtn = c.querySelector(b.checkoutBtn)),
                (this.discounts = c.querySelector(b.discounts)),
                (this.savings = c.querySelector(b.savings)),
                (this.subtotal = c.querySelector(b.subTotal)),
                (this.termsCheckbox = c.querySelector(b.termsCheckbox)),
                (this.noteInput = c.querySelector(b.cartNote)),
                this.termsCheckbox && (a = !0),
                this.init());
        }
        var b = {
            products: "[data-products]",
            qtySelector: ".js-qty__wrapper",
            discounts: "[data-discounts]",
            savings: "[data-savings]",
            subTotal: "[data-subtotal]",
            cartBubble: ".cart-link__bubble",
            cartNote: '[name="note"]',
            termsCheckbox: ".cart__terms-checkbox",
            checkoutBtn: ".cart__checkout",
        };
        var a = !1;
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.initQtySelectors();
                document.addEventListener("cart:quantity" + this.namespace, this.quantityChanged.bind(this));
                this.form.on("submit" + this.namespace, this.onSubmit.bind(this));
                this.noteInput &&
                    this.noteInput.addEventListener("change", function () {
                        theme.cart.updateNote(this.value);
                    });
                document.addEventListener(
                    "cart:build",
                    function () {
                        this.buildCart();
                    }.bind(this)
                );
            },
            reInit: function () {
                this.initQtySelectors();
            },
            onSubmit: function (c) {
                this.submitBtn.classList.add("btn--loading");
                if (a && !this.termsCheckbox.checked) return alert(theme.strings.cartTermsConfirmation), this.submitBtn.classList.remove("btn--loading"), c.preventDefault(), !1;
            },
            _parseProductHTML: function (c) {
                c = new DOMParser().parseFromString(c, "text/html");
                return { items: c.querySelector(".cart__items"), discounts: c.querySelector(".cart__discounts") };
            },
            buildCart: function () {
                theme.cart.getCartProductMarkup().then(this.cartMarkup.bind(this));
            },
            cartMarkup: function (c) {
                c = this._parseProductHTML(c);
                var e = c.items,
                    f = parseInt(e.dataset.count),
                    g = e.dataset.cartSubtotal,
                    h = e.dataset.cartSavings;
                this.updateCartDiscounts(c.discounts);
                this.updateSavings(h);
                0 < f ? this.wrapper.classList.remove("is-empty") : this.wrapper.classList.add("is-empty");
                this.updateCount(f);
                this.products.innerHTML = "";
                this.products.append(e);
                this.subtotal.innerHTML = theme.Currency.formatMoney(g, theme.settings.moneyFormat);
                this.reInit();
                window.AOS && AOS.refreshHard();
                Shopify && Shopify.StorefrontExpressButtons && Shopify.StorefrontExpressButtons.initialize();
            },
            updateCartDiscounts: function (c) {
                this.discounts && ((this.discounts.innerHTML = ""), this.discounts.append(c));
            },
            initQtySelectors: function () {
                this.form.querySelectorAll(b.qtySelector).forEach((c) => {
                    new theme.QtySelector(c, { namespace: this.namespace, isCart: !0 });
                });
            },
            quantityChanged: function (c) {
                var e = c.detail[0],
                    f = c.detail[1];
                c = c.detail[2];
                e &&
                    f &&
                    (c && c.classList.add("is-loading"),
                    theme.cart
                        .changeItem(e, f)
                        .then(
                            function (g) {
                                0 < g.item_count ? this.wrapper.classList.remove("is-empty") : this.wrapper.classList.add("is-empty");
                                this.buildCart();
                                document.dispatchEvent(new CustomEvent("cart:updated", { detail: { cart: g } }));
                            }.bind(this)
                        )
                        .catch(function (g) {}));
            },
            updateSubtotal: function (c) {
                this.form.querySelector(b.subTotal).innerHTML = theme.Currency.formatMoney(c, theme.settings.moneyFormat);
            },
            updateSavings: function (c) {
                this.savings &&
                    (0 < c
                        ? ((c = theme.Currency.formatMoney(c, theme.settings.moneyFormat)), this.savings.classList.remove("hide"), (this.savings.innerHTML = theme.strings.cartSavings.replace("[savings]", c)))
                        : this.savings.classList.add("hide"));
            },
            updateCount: function (c) {
                var e = document.querySelectorAll(".cart-link__bubble-num");
                e.length &&
                    e.forEach((f) => {
                        f.innerText = c;
                    });
                e = document.querySelectorAll(b.cartBubble);
                e.length &&
                    (0 < c
                        ? e.forEach((f) => {
                              f.classList.add("cart-link__bubble--visible");
                          })
                        : e.forEach((f) => {
                              f.classList.remove("cart-link__bubble--visible");
                          }));
            },
        });
        return d;
    })();
    theme.collapsibles = (function () {
        function d(f) {
            if (!e) {
                e = !0;
                f = f.currentTarget;
                var g = f.classList.contains(c.open),
                    h = f.classList.contains(c.tabs),
                    m = f.getAttribute("aria-controls"),
                    n = document.getElementById(m);
                m || (m = f.dataset.controls);
                if (m)
                    if ((n || (0 < document.querySelectorAll('[data-id="' + m + '"]').length && (n = f.parentNode.querySelector('[data-id="' + m + '"]'))), n)) {
                        var q = n.querySelector(a.moduleInner).offsetHeight,
                            r = n.classList.contains(c.autoHeight);
                        m = n.parentNode.closest(a.module);
                        var t = q;
                        if (h) {
                            if (g) {
                                e = !1;
                                return;
                            }
                            var l;
                            document.querySelectorAll(a.tabs + '[data-id="' + f.dataset.id + '"]').forEach((A) => {
                                A.classList.remove(c.open);
                                l = document.querySelector("#" + A.getAttribute("aria-controls"));
                                b(l, 0, !0);
                            });
                        }
                        g &&
                            r &&
                            setTimeout(function () {
                                q = 0;
                                b(n, q, g, r);
                            }, 0);
                        g && !r && (q = 0);
                        f.setAttribute("aria-expanded", !g);
                        g ? f.classList.remove(c.open) : f.classList.add(c.open);
                        b(n, q, g, r);
                        m && ((f = m.style.height), g && "auto" === f && (t = 0), b(m, g ? m.offsetHeight - t : q + m.offsetHeight, !1, !1));
                        window.SPR &&
                            (f = n.querySelector(".spr-summary-actions-newreview")) &&
                            (f.off("click.collapsible"),
                            f.on("click.collapsible", function () {
                                q = n.querySelector(a.moduleInner).offsetHeight;
                                b(n, q, g, r);
                            }));
                    } else e = !1;
            }
        }
        function b(f, g, h, m) {
            f.classList.remove(c.hide);
            theme.utils.prepareTransition(f, function () {
                f.style.height = g + "px";
                h ? f.classList.remove(c.open) : f.classList.add(c.open);
            });
            !h && m
                ? window.setTimeout(function () {
                      f.css("height", "auto");
                      e = !1;
                  }, 500)
                : (e = !1);
        }
        var a = { trigger: ".collapsible-trigger", module: ".collapsible-content", moduleInner: ".collapsible-content__inner", tabs: ".collapsible-trigger--tab" },
            c = { hide: "hide", open: "is-open", autoHeight: "collapsible--auto-height", tabs: "collapsible-trigger--tab" },
            e = !1;
        return {
            init: function (f) {
                (f ? f : document).querySelectorAll(a.trigger).forEach((g) => {
                    var h = g.classList.contains(c.open);
                    g.setAttribute("aria-expanded", h);
                    g.off("click.collapsible");
                    g.on("click.collapsible", d);
                });
            },
        };
    })();
    theme.Disclosure = (function () {
        function d(b) {
            this.container = b;
            this._cacheSelectors();
            this._setupListeners();
        }
        d.prototype = Object.assign({}, d.prototype, {
            _cacheSelectors: function () {
                this.cache = {
                    disclosureForm: this.container.closest("[data-disclosure-form]"),
                    disclosureList: this.container.querySelector("[data-disclosure-list]"),
                    disclosureToggle: this.container.querySelector("[data-disclosure-toggle]"),
                    disclosureInput: this.container.querySelector("[data-disclosure-input]"),
                    disclosureOptions: this.container.querySelectorAll("[data-disclosure-option]"),
                };
            },
            _setupListeners: function () {
                this.eventHandlers = this._setupEventHandlers();
                this.cache.disclosureToggle.addEventListener("click", this.eventHandlers.toggleList);
                this.cache.disclosureOptions.forEach(function (b) {
                    b.addEventListener("click", this.eventHandlers.connectOptions);
                }, this);
                this.container.addEventListener("keyup", this.eventHandlers.onDisclosureKeyUp);
                this.cache.disclosureList.addEventListener("focusout", this.eventHandlers.onDisclosureListFocusOut);
                this.cache.disclosureToggle.addEventListener("focusout", this.eventHandlers.onDisclosureToggleFocusOut);
                document.body.addEventListener("click", this.eventHandlers.onBodyClick);
            },
            _setupEventHandlers: function () {
                return {
                    connectOptions: this._connectOptions.bind(this),
                    toggleList: this._toggleList.bind(this),
                    onBodyClick: this._onBodyClick.bind(this),
                    onDisclosureKeyUp: this._onDisclosureKeyUp.bind(this),
                    onDisclosureListFocusOut: this._onDisclosureListFocusOut.bind(this),
                    onDisclosureToggleFocusOut: this._onDisclosureToggleFocusOut.bind(this),
                };
            },
            _connectOptions: function (b) {
                b.preventDefault();
                this._submitForm(b.currentTarget.dataset.value);
            },
            _onDisclosureToggleFocusOut: function (b) {
                !1 === this.container.contains(b.relatedTarget) && this._hideList();
            },
            _onDisclosureListFocusOut: function (b) {
                b = b.currentTarget.contains(b.relatedTarget);
                this.cache.disclosureList.classList.contains("disclosure-list--visible") && !b && this._hideList();
            },
            _onDisclosureKeyUp: function (b) {
                27 === b.which && (this._hideList(), this.cache.disclosureToggle.focus());
            },
            _onBodyClick: function (b) {
                b = this.container.contains(b.target);
                this.cache.disclosureList.classList.contains("disclosure-list--visible") && !b && this._hideList();
            },
            _submitForm: function (b) {
                this.cache.disclosureInput.value = b;
                this.cache.disclosureForm.submit();
            },
            _hideList: function () {
                this.cache.disclosureList.classList.remove("disclosure-list--visible");
                this.cache.disclosureToggle.setAttribute("aria-expanded", !1);
            },
            _toggleList: function () {
                var b = "true" === this.cache.disclosureToggle.getAttribute("aria-expanded");
                this.cache.disclosureList.classList.toggle("disclosure-list--visible");
                this.cache.disclosureToggle.setAttribute("aria-expanded", !b);
            },
            destroy: function () {
                this.cache.disclosureToggle.removeEventListener("click", this.eventHandlers.toggleList);
                this.cache.disclosureOptions.forEach(function (b) {
                    b.removeEventListener("click", this.eventHandlers.connectOptions);
                }, this);
                this.container.removeEventListener("keyup", this.eventHandlers.onDisclosureKeyUp);
                this.cache.disclosureList.removeEventListener("focusout", this.eventHandlers.onDisclosureListFocusOut);
                this.cache.disclosureToggle.removeEventListener("focusout", this.eventHandlers.onDisclosureToggleFocusOut);
                document.body.removeEventListener("click", this.eventHandlers.onBodyClick);
            },
        });
        return d;
    })();
    theme.Drawers = (function () {
        function d(b, a) {
            this.config = { id: b, close: ".js-drawer-close", open: ".js-drawer-open-" + a, openClass: "js-drawer-open", closingClass: "js-drawer-closing", activeDrawer: "drawer--is-open", namespace: ".drawer-" + a };
            this.nodes = { page: document.querySelector("#MainContent") };
            this.drawer = document.querySelector("#" + b);
            this.isOpen = !1;
            this.drawer && this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                document.querySelectorAll(this.config.open).forEach((b) => {
                    b.setAttribute("aria-expanded", "false");
                    b.addEventListener("click", this.open.bind(this));
                });
                this.drawer.querySelector(this.config.close).addEventListener("click", this.close.bind(this));
                document.addEventListener(
                    "modalOpen",
                    function () {
                        this.close();
                    }.bind(this)
                );
            },
            open: function (b, a) {
                b && b.preventDefault();
                this.isOpen ||
                    (b && b.stopPropagation ? (b.stopPropagation(), b.currentTarget.setAttribute("aria-expanded", "true"), (this.activeSource = b.currentTarget)) : a && (a.setAttribute("aria-expanded", "true"), (this.activeSource = a)),
                    theme.utils.prepareTransition(
                        this.drawer,
                        function () {
                            this.drawer.classList.add(this.config.activeDrawer);
                        }.bind(this)
                    ),
                    document.documentElement.classList.add(this.config.openClass),
                    (this.isOpen = !0),
                    theme.a11y.trapFocus({ container: this.drawer, namespace: "drawer_focus" }),
                    document.dispatchEvent(new CustomEvent("drawerOpen")),
                    document.dispatchEvent(new CustomEvent("drawerOpen." + this.config.id)),
                    this.bindEvents());
            },
            close: function (b) {
                !this.isOpen ||
                    (b && !b.target.closest(".js-drawer-close") && b.target.closest(".drawer")) ||
                    (document.activeElement.blur(),
                    theme.utils.prepareTransition(
                        this.drawer,
                        function () {
                            this.drawer.classList.remove(this.config.activeDrawer);
                        }.bind(this)
                    ),
                    document.documentElement.classList.remove(this.config.openClass),
                    document.documentElement.classList.add(this.config.closingClass),
                    window.setTimeout(
                        function () {
                            document.documentElement.classList.remove(this.config.closingClass);
                            this.activeSource && this.activeSource.getAttribute("aria-expanded") && (this.activeSource.setAttribute("aria-expanded", "false"), this.activeSource.focus());
                        }.bind(this),
                        500
                    ),
                    (this.isOpen = !1),
                    theme.a11y.removeTrapFocus({ container: this.drawer, namespace: "drawer_focus" }),
                    this.unbindEvents());
            },
            bindEvents: function () {
                window.on(
                    "click" + this.config.namespace,
                    function (b) {
                        this.close(b);
                    }.bind(this)
                );
                window.on(
                    "keyup" + this.config.namespace,
                    function (b) {
                        27 === b.keyCode && this.close();
                    }.bind(this)
                );
                theme.a11y.lockMobileScrolling(this.config.namespace, this.nodes.page);
            },
            unbindEvents: function () {
                window.off("click" + this.config.namespace);
                window.off("keyup" + this.config.namespace);
                theme.a11y.unlockMobileScrolling(this.config.namespace, this.nodes.page);
            },
        });
        return d;
    })();
    theme.Modals = (function () {
        function d(b, a, c) {
            a = {
                close: ".js-modal-close",
                open: ".js-modal-open-" + a,
                openClass: "modal--is-active",
                closingClass: "modal--is-closing",
                bodyOpenClass: ["modal-open"],
                bodyOpenSolidClass: "modal-open--solid",
                bodyClosingClass: "modal-closing",
                closeOffContentClick: !0,
            };
            this.id = b;
            this.modal = document.getElementById(b);
            if (!this.modal) return !1;
            this.modalContent = this.modal.querySelector(".modal__inner");
            this.config = Object.assign(a, c);
            this.modalIsOpen = !1;
            this.focusOnOpen = this.config.focusIdOnOpen ? document.getElementById(this.config.focusIdOnOpen) : this.modal;
            this.isSolid = this.config.solid;
            this.init();
        }
        d.prototype.init = function () {
            document.querySelectorAll(this.config.open).forEach((b) => {
                b.setAttribute("aria-expanded", "false");
                b.addEventListener("click", this.open.bind(this));
            });
            this.modal.querySelectorAll(this.config.close).forEach((b) => {
                b.addEventListener("click", this.close.bind(this));
            });
            document.addEventListener(
                "drawerOpen",
                function () {
                    this.close();
                }.bind(this)
            );
        };
        d.prototype.open = function (b) {
            var a = !1;
            this.modalIsOpen ||
                (b ? b.preventDefault() : (a = !0),
                b && b.stopPropagation && (b.stopPropagation(), (this.activeSource = b.currentTarget.setAttribute("aria-expanded", "true"))),
                this.modalIsOpen && !a && this.close(),
                this.modal.classList.add(this.config.openClass),
                document.documentElement.classList.add(...this.config.bodyOpenClass),
                this.isSolid && document.documentElement.classList.add(this.config.bodyOpenSolidClass),
                (this.modalIsOpen = !0),
                theme.a11y.trapFocus({ container: this.modal, elementToFocus: this.focusOnOpen, namespace: "modal_focus" }),
                document.dispatchEvent(new CustomEvent("modalOpen")),
                document.dispatchEvent(new CustomEvent("modalOpen." + this.id)),
                this.bindEvents());
        };
        d.prototype.close = function (b) {
            !this.modalIsOpen ||
                (b && !b.target.closest(".js-modal-close") && b.target.closest(".modal__inner")) ||
                (document.activeElement.blur(),
                this.modal.classList.remove(this.config.openClass),
                this.modal.classList.add(this.config.closingClass),
                document.documentElement.classList.remove(...this.config.bodyOpenClass),
                document.documentElement.classList.add(this.config.bodyClosingClass),
                window.setTimeout(
                    function () {
                        document.documentElement.classList.remove(this.config.bodyClosingClass);
                        this.modal.classList.remove(this.config.closingClass);
                        this.activeSource && this.activeSource.getAttribute("aria-expanded") && this.activeSource.setAttribute("aria-expanded", "false").focus();
                    }.bind(this),
                    500
                ),
                this.isSolid && document.documentElement.classList.remove(this.config.bodyOpenSolidClass),
                (this.modalIsOpen = !1),
                theme.a11y.removeTrapFocus({ container: this.modal, namespace: "modal_focus" }),
                document.dispatchEvent(new CustomEvent("modalClose." + this.id)),
                this.unbindEvents());
        };
        d.prototype.bindEvents = function () {
            window.on(
                "keyup.modal",
                function (b) {
                    27 === b.keyCode && this.close();
                }.bind(this)
            );
            if (this.config.closeOffContentClick) this.modal.on("click.modal", this.close.bind(this));
        };
        d.prototype.unbindEvents = function () {
            document.documentElement.off(".modal");
            this.config.closeOffContentClick && this.modal.off(".modal");
        };
        return d;
    })();
    theme.parallaxSections = {};
    theme.Parallax = (function () {
        function d(a, c) {
            this.isVisible = this.isInit = !1;
            this.container = a;
            this.image = a.querySelector(".parallax-image");
            this.namespace = c.namespace;
            this.desktopOnly = c.desktopOnly;
            this.container &&
                this.image &&
                (this.desktopOnly &&
                    (document.addEventListener(
                        "matchSmall",
                        function () {
                            this.destroy();
                        }.bind(this)
                    ),
                    document.addEventListener(
                        "unmatchSmall",
                        function () {
                            this.init(!0);
                        }.bind(this)
                    )),
                this.init(this.desktopOnly));
        }
        var b = !1;
        d.prototype = Object.assign({}, d.prototype, {
            init: function (a) {
                this.isInit && this.destroy();
                this.isInit = !0;
                (a && theme.config.bpSmall) ||
                    (this.setSizes(),
                    this.scrollHandler(),
                    new IntersectionObserver(
                        (c, e) => {
                            c.forEach((f) => {
                                if ((this.isVisible = f.isIntersecting)) window.on("scroll" + this.namespace, this.onScroll.bind(this));
                                else window.off("scroll" + this.namespace);
                            });
                        },
                        { rootMargin: "200px 0px 200px 0px" }
                    ).observe(this.container),
                    window.on("resize" + this.namespace, theme.utils.debounce(250, this.setSizes.bind(this))),
                    document.addEventListener("shopify:section:reorder", theme.utils.debounce(250, this.onReorder.bind(this))));
            },
            onScroll: function () {
                this.isVisible && (window.SPR && !b && (this.setSizes(), (b = !0)), requestAnimationFrame(this.scrollHandler.bind(this)));
            },
            scrollHandler: function () {
                this.image.style.transform = "translate3d(0, " + 0.85 * (window.scrollY - this.elTop) + "px, 0)";
            },
            setSizes: function () {
                this.elTop = this.container.getBoundingClientRect().top + window.scrollY;
            },
            onReorder: function () {
                this.setSizes();
                this.onScroll();
            },
            destroy: function () {
                this.image.style.transform = "none";
                window.off("scroll" + this.namespace);
                window.off("resize" + this.namespace);
            },
        });
        return d;
    })();
    if ("undefined" === typeof window.noUiSlider) throw Error("theme.PriceRange is missing vendor noUiSlider: // =require vendor/nouislider.js");
    theme.PriceRange = (function () {
        function d(b, { onChange: a, onUpdate: c, ...e } = {}) {
            this.container = b;
            this.onChange = a;
            this.onUpdate = c;
            this.sliderOptions = e || {};
            return this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                if (!this.container.classList.contains("price-range")) throw Error("You must instantiate PriceRange with a valid container");
                this.formEl = this.container.closest("form");
                this.sliderEl = this.container.querySelector(".price-range__slider");
                this.inputMinEl = this.container.querySelector(".price-range__input-min");
                this.inputMaxEl = this.container.querySelector(".price-range__input-max");
                this.displayMinEl = this.container.querySelector(".price-range__display-min");
                this.displayMaxEl = this.container.querySelector(".price-range__display-max");
                this.minRange = parseFloat(this.container.dataset.min) || 0;
                this.minValue = parseFloat(this.container.dataset.minValue) || 0;
                this.maxRange = parseFloat(this.container.dataset.max) || 100;
                this.maxValue = parseFloat(this.container.dataset.maxValue) || this.maxRange;
                return this.createPriceRange();
            },
            createPriceRange: function () {
                this.sliderEl && this.sliderEl.noUiSlider && "function" === typeof this.sliderEl.noUiSlider.destroy && this.sliderEl.noUiSlider.destroy();
                var b = noUiSlider.create(this.sliderEl, { connect: !0, step: 10, ...this.sliderOptions, start: [this.minValue, this.maxValue], range: { min: this.minRange, max: this.maxRange } });
                b.on("update", (a) => {
                    this.displayMinEl.innerHTML = theme.Currency.formatMoney(a[0], theme.settings.moneyFormat);
                    this.displayMaxEl.innerHTML = theme.Currency.formatMoney(a[1], theme.settings.moneyFormat);
                    if (this.onUpdate) this.onUpdate(a);
                });
                b.on("change", (a) => {
                    this.inputMinEl.value = a[0];
                    this.inputMaxEl.value = a[1];
                    this.onChange && ((a = new FormData(this.formEl)), this.onChange(a));
                });
                return b;
            },
        });
        return d;
    })();
    theme.AjaxProduct = (function () {
        function d(a, c, e) {
            this.form = a;
            this.args = e;
            this.form && ((this.addToCart = a.querySelector(c ? c : ".add-to-cart")), this.form.addEventListener("submit", this.addItemFromForm.bind(this)));
        }
        var b = !1;
        d.prototype = Object.assign({}, d.prototype, {
            addItemFromForm: function (a, c) {
                a.preventDefault();
                b ||
                    (this.addToCart.classList.add("btn--loading"),
                    (b = !0),
                    (a = theme.utils.serialize(this.form)),
                    fetch(theme.routes.cartAdd, { method: "POST", body: a, credentials: "same-origin", headers: { "Content-Type": "application/x-www-form-urlencoded", "X-Requested-With": "XMLHttpRequest" } })
                        .then((e) => e.json())
                        .then(
                            function (e) {
                                422 === e.status ? this.error(e) : this.success(e);
                                b = !1;
                                this.addToCart.classList.remove("btn--loading");
                                document.body.classList.contains("template-cart") && (window.scrollTo(0, 0), location.reload());
                            }.bind(this)
                        ));
            },
            success: function (a) {
                var c = this.form.querySelector(".errors");
                c && c.remove();
                document.dispatchEvent(new CustomEvent("ajaxProduct:added", { detail: { product: a, addToCartBtn: this.addToCart } }));
                this.args && this.args.scopedEventId && document.dispatchEvent(new CustomEvent("ajaxProduct:added:" + this.args.scopedEventId, { detail: { product: a, addToCartBtn: this.addToCart } }));
            },
            error: function (a) {
                if (a.description) {
                    var c = this.form.querySelector(".errors");
                    c && c.remove();
                    c = document.createElement("div");
                    c.classList.add("errors", "text-center");
                    c.textContent = a.description;
                    this.form.append(c);
                    document.dispatchEvent(new CustomEvent("ajaxProduct:error", { detail: { errorMessage: a.description } }));
                    this.args && this.args.scopedEventId && document.dispatchEvent(new CustomEvent("ajaxProduct:error:" + this.args.scopedEventId, { detail: { errorMessage: a.description } }));
                } else console.warn(a);
            },
        });
        return d;
    })();
    theme.ProductMedia = (function () {
        function d(g) {
            if (!g)
                if (window.ShopifyXR) {
                    for (var h in c)
                        if (c.hasOwnProperty(h) && ((g = c[h]), !g.loaded)) {
                            var m = document.querySelector("#ModelJson-" + h);
                            window.ShopifyXR.addModels(JSON.parse(m.innerHTML));
                            g.loaded = !0;
                        }
                    window.ShopifyXR.setupXRElements();
                } else
                    document.addEventListener("shopify_xr_initialized", function () {
                        d();
                    });
        }
        function b(g) {
            if (!g) for (var h in e) e.hasOwnProperty(h) && ((g = e[h]), !g.modelViewerUi && Shopify && (g.modelViewerUi = new Shopify.ModelViewerUI(g.element)), a(g));
        }
        function a(g) {
            var h = f[g.sectionId];
            g.container.addEventListener("mediaVisible", function () {
                h.element.setAttribute("data-shopify-model3d-id", g.modelId);
                theme.config.isTouch || g.modelViewerUi.play();
            });
            g.container.addEventListener("mediaHidden", function () {
                h.element.setAttribute("data-shopify-model3d-id", h.defaultId);
                g.modelViewerUi.pause();
            });
            g.container.addEventListener("xrLaunch", function () {
                g.modelViewerUi.pause();
            });
        }
        var c = {},
            e = {},
            f = {};
        return {
            init: function (g, h) {
                c[h] = { loaded: !1 };
                g.forEach(function (m, n) {
                    var q = m.dataset.mediaId,
                        r = m.querySelector("model-viewer"),
                        t = r.dataset.modelId;
                    0 === n && ((n = m.closest("[data-product-single-media-group]").querySelector("[data-shopify-xr]")), (f[h] = { element: n, defaultId: t }));
                    e[q] = { modelId: t, sectionId: h, container: m, element: r };
                });
                window.Shopify.loadFeatures([
                    { name: "shopify-xr", version: "1.0", onLoad: d },
                    { name: "model-viewer-ui", version: "1.0", onLoad: b },
                ]);
                theme.LibraryLoader.load("modelViewerUiStyles");
            },
            removeSectionModels: function (g) {
                for (var h in e) e.hasOwnProperty(h) && e[h].sectionId === g && delete e[h];
                delete c[g];
            },
        };
    })();
    theme.QtySelector = (function () {
        function d(a, c) {
            this.wrapper = a;
            this.plus = a.querySelector(b.plus);
            this.minus = a.querySelector(b.minus);
            this.input = a.querySelector(b.input);
            this.minValue = this.input.getAttribute("min") || 1;
            this.options = Object.assign({}, { namespace: null, isCart: !1, key: this.input.dataset.id }, c);
            this.init();
        }
        var b = { input: ".js-qty__num", plus: ".js-qty__adjust--plus", minus: ".js-qty__adjust--minus" };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.plus.addEventListener(
                    "click",
                    function () {
                        var a = this._getQty();
                        this._change(a + 1);
                    }.bind(this)
                );
                this.minus.addEventListener(
                    "click",
                    function () {
                        var a = this._getQty();
                        this._change(a - 1);
                    }.bind(this)
                );
                this.input.addEventListener(
                    "change",
                    function (a) {
                        this._change(this._getQty());
                    }.bind(this)
                );
            },
            _getQty: function () {
                var a = this.input.value;
                if (parseFloat(a) != parseInt(a) || isNaN(a)) a = 1;
                return parseInt(a);
            },
            _change: function (a) {
                a <= this.minValue && (a = this.minValue);
                this.input.value = a;
                this.options.isCart && document.dispatchEvent(new CustomEvent("cart:quantity" + this.options.namespace, { detail: [this.options.key, a, this.wrapper] }));
            },
        });
        return d;
    })();
    theme.initQuickShop = function () {
        function d(a) {
          console.log('quick 3');
            var c = a.currentTarget;
            if (!theme.config.bpSmall && (c.removeEventListener("mouseover", d), c && c.dataset.productId)) {
                a = c.dataset.productId;
                var e = c.dataset.productHandle;
                c = c.querySelector(".quick-product__btn");
                theme.preloadProductModal(e, a, c);
            }
        }
        var b = document.querySelectorAll(".grid-product");
        b.length &&
            theme.settings.quickView &&
            b.forEach((a) => {
              console.log('quick 1');
                a.addEventListener("mouseover", d);
            });
    };
    theme.preloadProductModal = function (d, b, a) {
      console.log('quick 2');
        var c = document.getElementById("QuickShopHolder-" + d),
            e = theme.routes.home + "/products/" + d + "?view=modal";
        e = e.replace("//", "/");
        fetch(e)
            .then(function (f) {
                return f.text();
            })
            .then(function (f) {
                f = new DOMParser().parseFromString(f, "text/html").querySelector('.product-section[data-product-handle="' + d + '"]');
                c &&
                    ((c.innerHTML = ""),
                    c.append(f),
                    new theme.Modals("QuickShopModal-" + b, "quick-modal-" + b),
                    theme.sections.register("product", theme.Product, c),
                    theme.collapsibles.init(),
                    theme.videoModal(),
                    a && a.classList.remove("quick-product__btn--not-ready"));
            });
    };
    theme.Slideshow = (function () {
        function d(e, f) {
            function g(h) {
                if (h.id) {
                    for (var m = h.firstChild; null != m && 3 == m.nodeType; ) m = m.nextSibling;
                    var n = document.createElement("style");
                    n.innerHTML = `#${h.id} .flickity-viewport{height:${m.offsetHeight}px}`;
                    document.head.appendChild(n);
                }
            }
            this.el = e;
            this.args = Object.assign({}, c, f);
            this.args.on = { ready: this.init.bind(this), change: this.slideChange.bind(this), settle: this.afterChange.bind(this) };
            this.args.childNav &&
                ((this.childNavEls = this.args.childNav.querySelectorAll(a.thumb)),
                (this.childNavLinks = this.args.childNav.querySelectorAll(a.links)),
                (this.arrows = this.args.childNav.querySelectorAll(a.arrow)),
                this.childNavLinks.length && this.initChildNav());
            this.args.avoidReflow && g(e);
            this.slideshow = new Flickity(e, this.args);
            this.args.autoPlay && (this.pauseBtn = e.closest(b.wrapper).querySelector(b.pauseButton)) && this.pauseBtn.addEventListener("click", this._togglePause.bind(this));
            window.on(
                "resize",
                theme.utils.debounce(
                    300,
                    function () {
                        this.resize();
                    }.bind(this)
                )
            );
        }
        var b = { allSlides: ".slideshow__slide", currentSlide: ".is-selected", wrapper: ".slideshow-wrapper", pauseButton: ".slideshow__pause" },
            a = { thumb: ".product__thumb-item:not(.hide)", links: ".product__thumb-item:not(.hide) a", arrow: ".product__thumb-arrow" },
            c = {
                adaptiveHeight: !1,
                autoPlay: !1,
                avoidReflow: !1,
                childNav: null,
                childNavScroller: null,
                childVertical: !1,
                dragThreshold: 7,
                fade: !1,
                friction: 0.8,
                initialIndex: 0,
                pageDots: !1,
                pauseAutoPlayOnHover: !1,
                prevNextButtons: !1,
                rightToLeft: theme.config.rtl,
                selectedAttraction: 0.14,
                setGallerySize: !0,
                wrapAround: !0,
            };
        d.prototype = Object.assign({}, d.prototype, {
            init: function (e) {
                this.currentSlide = this.el.querySelector(b.currentSlide);
                if (this.args.callbacks && this.args.callbacks.onInit && "function" === typeof this.args.callbacks.onInit) this.args.callbacks.onInit(this.currentSlide);
                window.AOS && AOS.refresh();
            },
            slideChange: function (e) {
                this.args.fade &&
                    this.currentSlide &&
                    (this.currentSlide.classList.add("animate-out"),
                    this.currentSlide.addEventListener(
                        "transitionend",
                        function () {
                            this.currentSlide.classList.remove("animate-out");
                        }.bind(this)
                    ));
                this.args.childNav && this.childNavGoTo(e);
                if (this.args.callbacks && this.args.callbacks.onChange && "function" === typeof this.args.callbacks.onChange) this.args.callbacks.onChange(e);
                this.arrows && this.arrows.length && (this.arrows[0].classList.toggle("hide", 0 === e), this.arrows[1].classList.toggle("hide", e === this.childNavLinks.length - 1));
            },
            afterChange: function (e) {
                this.args.fade &&
                    this.el.querySelectorAll(b.allSlides).forEach((f) => {
                        f.classList.remove("animate-out");
                    });
                this.currentSlide = this.el.querySelector(b.currentSlide);
                this.args.childNav && this.childNavGoTo(this.slideshow.selectedIndex);
            },
            destroy: function () {
                this.args.childNav &&
                    this.childNavLinks.length &&
                    this.childNavLinks.forEach((e) => {
                        e.classList.remove("is-active");
                    });
                this.slideshow.destroy();
            },
            reposition: function () {
                this.slideshow.reposition();
            },
            _togglePause: function () {
                this.pauseBtn.classList.contains("is-paused") ? (this.pauseBtn.classList.remove("is-paused"), this.slideshow.playPlayer()) : (this.pauseBtn.classList.add("is-paused"), this.slideshow.pausePlayer());
            },
            resize: function () {
                this.slideshow.resize();
            },
            play: function () {
                this.slideshow.playPlayer();
            },
            pause: function () {
                this.slideshow.pausePlayer();
            },
            goToSlide: function (e) {
                this.slideshow.select(e);
            },
            setDraggable: function (e) {
                this.slideshow.options.draggable = e;
                this.slideshow.updateDraggable();
            },
            initChildNav: function () {
                this.childNavLinks[this.args.initialIndex].classList.add("is-active");
                this.childNavLinks.forEach((e, f) => {
                    e.setAttribute("data-index", f);
                    e.addEventListener(
                        "click",
                        function (g) {
                            g.preventDefault();
                            this.goToSlide(this.getChildIndex(g.currentTarget));
                        }.bind(this)
                    );
                    e.addEventListener(
                        "focus",
                        function (g) {
                            this.goToSlide(this.getChildIndex(g.currentTarget));
                        }.bind(this)
                    );
                    e.addEventListener(
                        "keydown",
                        function (g) {
                            13 === g.keyCode && this.goToSlide(this.getChildIndex(g.currentTarget));
                        }.bind(this)
                    );
                });
                this.arrows.length &&
                    this.arrows.forEach((e) => {
                        e.addEventListener("click", this.arrowClick.bind(this));
                    });
            },
            getChildIndex: function (e) {
                return parseInt(e.dataset.index);
            },
            childNavGoTo: function (e) {
                this.childNavLinks.forEach((f) => {
                    f.blur();
                    f.classList.remove("is-active");
                });
                e = this.childNavLinks[e];
                e.classList.add("is-active");
                this.args.childNavScroller && (this.args.childVertical ? (this.args.childNavScroller.scrollTop = e.offsetTop - 100) : (this.args.childNavScroller.scrollLeft = e.offsetLeft - 100));
            },
            arrowClick: function (e) {
                e.currentTarget.classList.contains("product__thumb-arrow--prev") ? this.slideshow.previous() : this.slideshow.next();
            },
        });
        return d;
    })();
    theme.VariantAvailability = (function () {
        function d(b) {
            this.type = b.type;
            this.variantsObject = b.variantsObject;
            this.currentVariantObject = b.currentVariantObject;
            this.container = b.container;
            this.namespace = b.namespace;
            this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.container.on("variantChange" + this.namespace, this.setAvailability.bind(this));
                this.setInitialAvailability();
            },
            createAvailableOptionsTree(b, a) {
                return b.reduce(
                    (c, e) => {
                        Object.keys(c).forEach((f) => {
                            if (null !== e[f]) {
                                var g = c[f].find((n) => n.value === e[f]);
                                "undefined" === typeof g && ((g = { value: e[f], soldOut: !0 }), c[f].push(g));
                                var h = a.find(({ index: n }) => "option1" === n),
                                    m = a.find(({ index: n }) => "option2" === n);
                                switch (f) {
                                    case "option1":
                                        g.soldOut = g.soldOut && e.available ? !1 : g.soldOut;
                                        break;
                                    case "option2":
                                        h && e.option1 === h.value && (g.soldOut = g.soldOut && e.available ? !1 : g.soldOut);
                                    case "option3":
                                        h && e.option1 === h.value && m && e.option2 === m.value && (g.soldOut = g.soldOut && e.available ? !1 : g.soldOut);
                                }
                            }
                        });
                        return c;
                    },
                    { option1: [], option2: [], option3: [] }
                );
            },
            setInitialAvailability: function () {
                this.container.querySelectorAll(".variant-input-wrap").forEach((e) => {
                    this.disableVariantGroup(e);
                });
                var b = this.currentVariantObject.options.map((e, f) => ({ value: e, index: `option${f + 1}` }));
                b = this.createAvailableOptionsTree(this.variantsObject, b, this.currentVariantObject);
                var a, c;
                for ([a, c] of Object.entries(b)) this.manageOptionState(a, c);
            },
            setAvailability: function (b) {
                const { value: a, index: c, currentlySelectedValues: e, variant: f } = b.detail;
                b = this.createAvailableOptionsTree(this.variantsObject, e, f, c, a);
                var g, h;
                for ([g, h] of Object.entries(b)) this.manageOptionState(g, h, a);
            },
            manageOptionState: function (b, a) {
                var c = this.container.querySelector('.variant-input-wrap[data-index="' + b + '"]');
                a.forEach((e) => {
                    this.enableVariantOption(c, e);
                });
            },
            enableVariantOption: function (b, a) {
                var c = a.value.replace(/([ #;&,.+*~':"!^$[\]()=>|\/@])/g, "\\$1");
                "dropdown" === this.type
                    ? (b.querySelector('option[value="' + c + '"]').disabled = !1)
                    : ((c = b.querySelector('.variant-input[data-value="' + c + '"]')),
                      (b = c.querySelector("input")),
                      (c = c.querySelector("label")),
                      b.classList.remove("disabled"),
                      c.classList.remove("disabled"),
                      a.soldOut && (b.classList.add("disabled"), c.classList.add("disabled")));
            },
            disableVariantGroup: function (b) {
                "dropdown" === this.type
                    ? b.querySelectorAll("option").forEach((a) => {
                          a.disabled = !0;
                      })
                    : (b.querySelectorAll("input").forEach((a) => {
                          a.classList.add("disabled");
                      }),
                      b.querySelectorAll("label").forEach((a) => {
                          a.classList.add("disabled");
                      }));
            },
        });
        return d;
    })();
    theme.videoModal = function () {
        function d(n) {
            theme.config.youTubeReady &&
                (n.preventDefault(),
                (h.innerHTML = ""),
                m.open(n),
                (n = n.currentTarget.getAttribute("href").match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&\?]*).*/)),
                (c = new theme.YouTube("VideoHolder", { videoId: n && 11 == n[7].length ? n[7] : !1, style: "sound", events: { onReady: a } })));
        }
        function b(n) {
            h.innerHTML = "";
            var q = n.currentTarget.parentNode.querySelector(e.mp4Player).cloneNode(!0);
            q.classList.remove("hide");
            h.append(q);
            m.open(n);
            h.querySelector("video").play();
        }
        function a(n) {
            n.target.unMute();
            n.target.playVideo();
        }
        var c,
            e = { youtube: 'a[href*="youtube.com/watch"], a[href*="youtu.be/"]', mp4Trigger: ".product-video-trigger--mp4", mp4Player: ".product-video-mp4-sound" },
            f = document.querySelectorAll(e.youtube),
            g = document.querySelectorAll(e.mp4Trigger);
        if (f.length || g.length) {
            var h = document.getElementById("VideoHolder");
            f.length && theme.LibraryLoader.load("youtubeSdk");
            var m = new theme.Modals("VideoModal", "video-modal", { closeOffContentClick: !0, bodyOpenClass: ["modal-open", "video-modal-open"], solid: !0 });
            f.forEach((n) => {
                n.addEventListener("click", d);
            });
            g.forEach((n) => {
                n.addEventListener("click", b);
            });
            document.addEventListener("modalClose.VideoModal", function () {
                c && "function" === typeof c.destroy ? c.destroy() : (h.innerHTML = "");
            });
        }
    };
    class H extends HTMLElement {
        constructor() {
            super();
            this.el = this;
            this.inner = this.querySelector("[data-tool-tip-inner]");
            this.closeButton = this.querySelector("[data-tool-tip-close]");
            this.toolTipContent = this.querySelector("[data-tool-tip-content]");
            this.triggers = document.querySelectorAll("[data-tool-tip-trigger]");
            document.addEventListener("tooltip:open", (d) => {
                this._open(d.detail.context, d.detail.content);
            });
        }
        _open(d, b) {
            this.toolTipContent.innerHTML = b;
            theme.a11y.trapFocus({ container: this.el, namespace: "tooltip_focus" });
            if (this.closeButton)
                this.closeButton.on("click.tooltip-close", () => {
                    this._close();
                });
            document.documentElement.on("click.tooltip-outerclick", (a) => {
                "true" !== this.el.dataset.toolTipOpen || this.inner.contains(a.target) || this._close();
            });
            document.documentElement.on("keydown.tooltip-esc", (a) => {
                "Escape" === a.code && this._close();
            });
            this.el.dataset.toolTipOpen = !0;
            this.el.dataset.toolTip = d;
        }
        _close() {
            this.toolTipContent.innerHTML = "";
            this.el.dataset.toolTipOpen = "false";
            this.el.dataset.toolTip = "";
            theme.a11y.removeTrapFocus({ container: this.el, namespace: "tooltip_focus" });
            this.closeButton.off("click.tooltip-close");
            document.documentElement.off("click.tooltip-outerclick");
            document.documentElement.off("keydown.tooltip-esc");
        }
    }
    customElements.define("tool-tip", H);
    class I extends HTMLElement {
        constructor() {
            super();
            this.el = this;
            this.toolTipContent = this.querySelector("[data-tool-tip-content]");
            this.init();
        }
        init() {
            const d = new CustomEvent("tooltip:open", { detail: { context: this.dataset.toolTip, content: this.toolTipContent.innerHTML }, bubbles: !0 });
            this.el.addEventListener("click", (b) => {
                b.stopPropagation();
                this.dispatchEvent(d);
            });
        }
    }
    customElements.define("tool-tip-trigger", I);
    class J extends HTMLElement {
        constructor() {
            super();
            this.closeBtn = this.querySelector("[data-close-button]");
            this.popupTrigger = this.querySelector("[data-message]");
            this.id = this.dataset.sectionId;
            this.newsletterId = `NewsletterPopup-${this.id}`;
            this.cookie = Cookies.get(`newsletter-${this.id}`);
            this.cookieName = `newsletter-${this.id}`;
            this.secondsBeforeShow = this.dataset.delaySeconds;
            this.expiry = parseInt(this.dataset.delayDays);
            this.modal = new theme.Modals(`NewsletterPopup-${this.newsletterId}`, "newsletter-popup-modal");
            this.init();
        }
        init() {
            document.addEventListener("shopify:block:select", (d) => {
                d.detail.sectionId === this.id && this.show(0, !0);
            });
            document.addEventListener("shopify:block:deselect", (d) => {
                d.detail.sectionId === this.id && this.hide();
            });
            document.addEventListener(`modalOpen.${this.newsletterId}`, () => this.hide());
            document.addEventListener(`modalClose.${this.newsletterId}`, () => this.show());
            this.closeBtn.addEventListener("click", () => {
                this.hide();
                Cookies.set(this.cookieName, "opened", { path: "/", expires: this.expiry });
            });
            this.popupTrigger.addEventListener("click", () => {
                const d = new CustomEvent("reminder:openNewsletter", { bubbles: !0 });
                this.dispatchEvent(d);
                this.hide();
            });
        }
        show(d = this.secondsBeforeShow, b = !1) {
            (!0 === !sessionStorage.getItem("newsletterAppeared") || b) &&
                setTimeout(() => {
                    this.dataset.enabled = "true";
                    b || sessionStorage.setItem("newsletterAppeared", !0);
                }, 1e3 * d);
        }
        hide() {
            this.dataset.enabled = "false";
        }
    }
    customElements.define("newsletter-reminder", J);
    theme.announcementBar = (function () {
        function d() {
            e = new theme.Slideshow(c, a);
        }
        function b() {
            e && "function" === typeof e.destroy && e.destroy();
        }
        var a = { autoPlay: 5e3, avoidReflow: !0, cellAlign: theme.config.rtl ? "right" : "left" },
            c,
            e;
        return {
            init: function () {
                if ((c = document.getElementById("AnnouncementSlider")))
                    b(),
                        1 !== c.dataset.blockCount &&
                            ((theme.config.bpSmall || "true" === c.dataset.compact) && d(),
                            document.addEventListener("matchSmall", function () {
                                b();
                                d();
                            }),
                            document.addEventListener("unmatchSmall", function () {
                                b();
                                "true" === c.dataset.compact && d();
                            }));
            },
            onBlockSelect: function (f) {
                f = c.querySelector("#AnnouncementSlide-" + f);
                f = parseInt(f.dataset.index);
                e && "function" === typeof e.pause && (e.goToSlide(f), e.pause());
            },
            onBlockDeselect: function () {
                e && "function" === typeof e.play && e.play();
            },
            unload: b,
        };
    })();
    theme.customerTemplates = function () {
        function d() {
            document.getElementById("RecoverPasswordForm").classList.toggle("hide");
            document.getElementById("CustomerLoginForm").classList.toggle("hide");
        }
        "#recover" === window.location.hash && d();
        (function () {
            var b = document.getElementById("RecoverPassword");
            b &&
                b.addEventListener("click", function (a) {
                    a.preventDefault();
                    d();
                });
            (b = document.getElementById("HideRecoverPasswordLink")) &&
                b.addEventListener("click", function (a) {
                    a.preventDefault();
                    d();
                });
        })();
        document.querySelector(".reset-password-success") && document.getElementById("ResetSuccess").classList.remove("hide");
        (function () {
            var b = document.getElementById("AddressNewForm"),
                a = document.querySelectorAll(".js-address-form");
            b &&
                a.length &&
                (setTimeout(function () {
                    document.querySelectorAll(".js-address-country").forEach((c) => {
                        new Shopify.CountryProvinceSelector(c.dataset.countryId, c.dataset.provinceId, { hideElement: c.dataset.provinceContainerId });
                    });
                }, 1e3),
                document.querySelectorAll(".address-new-toggle").forEach((c) => {
                    c.addEventListener("click", function () {
                        b.classList.toggle("hide");
                    });
                }),
                document.querySelectorAll(".address-edit-toggle").forEach((c) => {
                    c.addEventListener("click", function (e) {
                        document.getElementById("EditAddress_" + e.currentTarget.dataset.formId).classList.toggle("hide");
                    });
                }),
                document.querySelectorAll(".address-delete").forEach((c) => {
                    c.addEventListener("click", function (e) {
                        var f = e.currentTarget.dataset.formId;
                        confirm(e.currentTarget.dataset.confirmMessage || "Are you sure you wish to delete this address?") && Shopify && Shopify.postLink("/account/addresses/" + f, { parameters: { _method: "delete" } });
                    });
                }));
        })();
    };
    theme.CartDrawer = (function () {
        function d() {
            this.form = document.querySelector(b.form);
            this.drawer = new theme.Drawers("CartDrawer", "cart");
            this.init();
        }
        var b = { drawer: "#CartDrawer", form: "#CartDrawerForm" };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.cartForm = new theme.CartForm(this.form);
                this.cartForm.buildCart();
                document.addEventListener(
                    "ajaxProduct:added",
                    function (a) {
                        this.cartForm.buildCart();
                        this.open();
                    }.bind(this)
                );
                document.addEventListener("cart:open", this.open.bind(this));
                document.addEventListener("cart:close", this.close.bind(this));
            },
            open: function () {
                this.drawer.open();
            },
            close: function () {
                this.drawer.close();
            },
        });
        return d;
    })();
    theme.headerNav = (function () {
        function d() {
            var k = 0;
            x.querySelectorAll(r.megamenu).forEach((p) => {
                p = p.offsetHeight;
                p > k && (k = p);
            });
            return window.innerHeight < k + 120 ? !1 : !0;
        }
        function b() {
            l.lastScroll = 0;
            var k = document.createElement("div");
            k.id = l.stickyHeaderWrapper;
            theme.utils.wrap(x, k);
            a();
            window.on("resize" + l.namespace, theme.utils.debounce(50, a));
            window.on("scroll" + l.namespace, theme.utils.throttle(20, c));
            Shopify &&
                Shopify.designMode &&
                setTimeout(function () {
                    a();
                }, 250);
        }
        function a() {
            if (l.stickyEnabled) {
                var k = x.offsetHeight;
                document.querySelector("#" + l.stickyHeaderWrapper).style.height = k + "px";
            }
        }
        function c() {
            l.stickyEnabled && !l.forceStopSticky && (requestAnimationFrame(e), (l.lastScroll = window.scrollY));
        }
        function e() {
            250 < window.scrollY
                ? l.stickyActive ||
                  ((l.stickyActive = !0),
                  x.classList.add(l.stickyClass),
                  l.wrapperOverlayed && A.classList.remove(l.overlayedClass),
                  setTimeout(function () {
                      x.classList.add(l.openTransitionClass);
                  }, 100))
                : l.stickyActive && ((l.stickyActive = !1), x.classList.remove(l.openTransitionClass), x.classList.remove(l.stickyClass), l.wrapperOverlayed && A.classList.add(l.overlayedClass));
        }
        function f() {
            function k(u) {
                y && D();
                C && B();
                p(u.currentTarget);
            }
            function p(u) {
                u = u.parentNode;
                u.classList.contains(t.hasDropdownClass) && (u.classList.add(t.dropdownActive), (y = !0));
                if (!theme.config.isTouch && !E) {
                    var w = theme.config.isTouch ? "touchend" : "click";
                    E = !0;
                    document.documentElement.on(
                        w + l.namespace,
                        function () {
                            z();
                            document.documentElement.off(w + l.namespace);
                            E = !1;
                        }.bind(this)
                    );
                }
            }
            function v(u, w) {
                u = u.parentNode;
                if (u.classList.contains(t.hasSubDropdownClass) || w) u.classList.add(t.dropdownActive), (C = !0);
            }
            function z() {
                D();
                B();
            }
            function D() {
                document.querySelectorAll(r.navItems).forEach((u) => {
                    u.classList.remove(t.dropdownActive);
                });
            }
            function B() {
                document.querySelectorAll(r.navDropdownLinks).forEach((u) => {
                    u.parentNode.classList.remove(t.dropdownActive);
                });
            }
            var y = !1,
                C = !1,
                E = !1;
            theme.config.isTouch &&
                document.querySelectorAll(r.navLinksWithDropdown).forEach((u) => {
                    u.on("touchend" + l.namespace, function (w) {
                        w.currentTarget.parentNode.classList.contains(t.dropdownActive) ? window.location.replace(w.currentTarget.getAttribute("href")) : (w.preventDefault(), z(), p(w.currentTarget));
                    });
                });
            document.querySelectorAll(r.navLinks).forEach((u) => {
                u.on("focusin" + l.namespace, k);
                u.on("mouseover" + l.namespace, k);
                u.on("mouseleave" + l.namespace, z);
            });
            document.querySelectorAll(r.navDropdownLinks).forEach((u) => {
                if (theme.config.isTouch)
                    u.on("touchend" + l.namespace, function (w) {
                        var F = w.currentTarget.parentNode;
                        F.classList.contains(t.hasSubDropdownClass)
                            ? F.classList.contains(t.dropdownActive)
                                ? window.location.replace(w.currentTarget.getAttribute("href"))
                                : (w.preventDefault(), B(), v(w.currentTarget))
                            : window.location.replace(w.currentTarget.getAttribute("href"));
                    });
                u.on("focusin" + l.namespace, function (w) {
                    B();
                    v(w.currentTarget, !0);
                });
            });
            theme.config.isTouch &&
                (document.body.on("touchend" + l.namespace, function () {
                    z();
                }),
                x.querySelectorAll(r.megamenu).forEach((u) => {
                    u.on("touchend" + l.namespace, function (w) {
                        w.stopImmediatePropagation();
                    });
                }));
        }
        function g() {
            document.querySelectorAll(r.searchBtn).forEach((k) => {
                k.addEventListener("click", h);
            });
            document.querySelector(r.closeSearch).addEventListener("click", m);
        }
        function h(k) {
            k.preventDefault();
            k.stopImmediatePropagation();
            var p = document.querySelector(r.searchContainer);
            theme.utils.prepareTransition(
                p,
                function () {
                    p.classList.add("is-active");
                }.bind(this)
            );
            document.documentElement.classList.add("js-drawer-open", "js-drawer-open--search");
            setTimeout(function () {
                theme.a11y.trapFocus({ container: p, namespace: "header_search", elementToFocus: p.querySelector(".site-header__search-input") });
            }, 100);
            theme.config.bpSmall && l.stickyEnabled && 300 > l.lastScroll && window.scrollTo(0, 0);
            theme.a11y.lockMobileScrolling(l.namespace);
            n();
        }
        function m(k) {
            if (k) {
                k = k.path || (k.composedPath && k.composedPath());
                for (var p = 0; p < k.length; p++)
                    if (k[p].classList) {
                        if (k[p].classList.contains("site-header__search-btn")) break;
                        if (k[p].classList.contains("site-header__search-container")) return;
                    }
            }
            document.activeElement.blur();
            document.documentElement.classList.add("js-drawer-closing");
            document.documentElement.classList.remove("js-drawer-open", "js-drawer-open--search");
            window.setTimeout(
                function () {
                    document.documentElement.classList.remove("js-drawer-closing");
                }.bind(this),
                500
            );
            var v = document.querySelector(r.searchContainer);
            theme.utils.prepareTransition(
                v,
                function () {
                    v.classList.remove("is-active");
                }.bind(this)
            );
            theme.a11y.removeTrapFocus({ container: v, namespace: "header_search" });
            theme.a11y.unlockMobileScrolling(l.namespace);
            window.off("keyup" + l.namespace);
            document.documentElement.off("click" + l.namespace);
        }
        function n() {
            window.on(
                "keyup" + l.namespace,
                function (k) {
                    27 === k.keyCode && m();
                }.bind(this)
            );
            document.documentElement.on(
                "click" + l.namespace,
                function (k) {
                    m(k);
                }.bind(this)
            );
        }
        function q(k) {
            document.querySelectorAll(r.logo).forEach((p) => {
                var v = p.clientWidth,
                    z = p.closest(".header-item").clientWidth;
                v > z ? (p.style.maxWidth = z) : p.removeAttribute("style");
            });
        }
        var r = {
                wrapper: "#HeaderWrapper",
                siteHeader: "#SiteHeader",
                searchBtn: ".js-search-header",
                closeSearch: "#SearchClose",
                searchContainer: ".site-header__search-container",
                logo: "#LogoContainer img",
                megamenu: ".megamenu",
                navItems: ".site-nav__item",
                navLinks: ".site-nav__link",
                navLinksWithDropdown: ".site-nav__link--has-dropdown",
                navDropdownLinks: ".site-nav__dropdown-link--second-level",
            },
            t = { hasDropdownClass: "site-nav--has-dropdown", hasSubDropdownClass: "site-nav__deep-dropdown-trigger", dropdownActive: "is-focused" },
            l = {
                namespace: ".siteNav",
                wrapperOverlayed: !1,
                overlayedClass: "is-light",
                overlayEnabledClass: "header-wrapper--sticky",
                stickyEnabled: !1,
                stickyActive: !1,
                stickyClass: "site-header--stuck",
                stickyHeaderWrapper: "StickyHeaderWrap",
                openTransitionClass: "site-header--opening",
                lastScroll: 0,
            },
            A,
            x;
        return {
            init: function () {
                A = document.querySelector(r.wrapper);
                x = document.querySelector(r.siteHeader);
                l.stickyEnabled = "true" === x.dataset.sticky;
                l.stickyEnabled && ((l.wrapperOverlayed = A.classList.contains(l.overlayedClass)), (theme.config.stickyHeader = d()), theme.config.stickyHeader ? ((l.forceStopSticky = !1), b()) : (l.forceStopSticky = !0));
                theme.settings.overlayHeader = "true" === x.dataset.overlay;
                theme.settings.overlayHeader && Shopify && Shopify.designMode && document.body.classList.contains("template-collection") && !document.querySelector(".collection-hero") && this.disableOverlayHeader();
                f();
                g();
                window.on("load" + l.namespace, q);
                window.on("resize" + l.namespace, theme.utils.debounce(150, q));
            },
            disableOverlayHeader: function () {
                A.classList.remove(l.overlayEnabledClass, l.overlayedClass);
                l.wrapperOverlayed = !1;
                theme.settings.overlayHeader = !1;
            },
        };
    })();
    window.onpageshow = function (d) {
        d.persisted &&
            (document.body.classList.remove("unloading"),
            document.querySelectorAll(".cart__checkout").forEach((b) => {
                b.classList.remove("btn--loading");
            }));
    };
    theme.predictiveSearch = (function () {
        function d() {
            l.wrapper.classList.add("hide");
            l.results.innerHTML = "";
            clearTimeout(t);
        }
        function b() {
            l.form.submit();
        }
        function a(k) {
            k.preventDefault ? k.preventDefault() : (k.returnValue = !1);
            var p = {};
            k = new FormData(k.target);
            for (var v of k.keys()) p[v] = k.get(v);
            p.q && (p.q += "*");
            p = n(p);
            window.location.href = `${theme.routes.search}?${p}`;
            return !1;
        }
        function c(k) {
            k.keyCode !== x.up_arrow && k.keyCode !== x.down_arrow && k.keyCode !== x.tab && e();
        }
        function e() {
            var k = l.input.value;
            if ("" === k) d();
            else {
                var p = "string" !== typeof k ? null : k.trim().replace(/ /g, "-").toLowerCase();
                clearTimeout(t);
                t = setTimeout(
                    function () {
                        f(p);
                    }.bind(this),
                    500
                );
            }
        }
        function f(k) {
            r ||
                q === k ||
                ((q = k),
                (r = !0),
                (k = n({ q: k, "resources[type]": theme.settings.predictiveSearchType, "resources[limit]": 4, "resources[options][unavailable_products]": "last", "resources[options][fields]": "title,product_type,variants.title,vendor" })),
                fetch("/search/suggest.json?" + k)
                    .then((p) => p.json())
                    .then((p) => {
                        r = !1;
                        var v = {},
                            z = 0;
                        l.wrapper.classList.remove("hide");
                        var D = Object.entries(p.resources.results);
                        Object.keys(D).forEach(function (B) {
                            var y = D[B];
                            B = y[0];
                            y = y[1];
                            z += y.length;
                            switch (B) {
                                case "products":
                                    v[B] = g(y);
                                    break;
                                case "collections":
                                    var C = "";
                                    y.length &&
                                        ((y = theme.buildCollectionItem(y)),
                                        (C = `
          <div data-type-collections>
            <p class="h6 predictive__label">${theme.strings.searchCollections}</p>
            <ul class="no-bullets">
              ${y}
            </ul>
          </div>
        `));
                                    v[B] = C;
                                    break;
                                case "pages":
                                    C = "";
                                    y.length &&
                                        ((y = theme.buildPageItem(y)),
                                        (C = `
          <div data-type-pages>
            <p class="h6 predictive__label">${theme.strings.searchPages}</p>
            <ul class="no-bullets">
              ${y}
            </ul>
          </div>
        `));
                                    v[B] = C;
                                    break;
                                case "articles":
                                    v[B] = h(y);
                            }
                        });
                        0 === z ? d() : ((p = m(v)), (l.results.innerHTML = ""), (l.results.innerHTML = p));
                    }));
        }
        function g(k) {
            var p = "",
                v = [];
            k.forEach((z) => {
                z = { title: z.title, url: z.url, image_responsive_url: theme.Images.lazyloadImagePath(z.image), image_aspect_ratio: z.featured_image.aspect_ratio };
                v.push(z);
            });
            v.length &&
                (p = `
          <div data-type-products>
            <div class="grid grid--uniform">
              ${theme.buildProductGridItem(v, "small--one-half medium-up--one-quarter", 4, A.imageSize)}
            </div>
          </div>
        `);
            return p;
        }
        function h(k) {
            var p = "";
            k.forEach((v) => {
                v.image && (v.image = theme.Images.getSizedImageUrl(v.image, "200x200_crop_center"));
            });
            k.length &&
                ((k = theme.buildArticleItem(k, A.imageSize)),
                (p = `
          <div data-type-articles>
            <p class="h6 predictive__label">${theme.strings.searchArticles}</p>
            <div class="grid grid--uniform">
              ${k}
            </div>
          </div>
        `));
            return p;
        }
        function m(k) {
            var p = "";
            k.products && "" !== k.products && (p += k.products);
            k.collections && "" !== k.collections && (p += k.collections);
            k.pages && "" !== k.pages && (p += k.pages);
            k.articles && "" !== k.articles && (p += k.articles);
            return p;
        }
        function n(k) {
            return Object.keys(k)
                .map(function (p) {
                    return p + "=" + encodeURIComponent(k[p]);
                })
                .join("&");
        }
        var q = "",
            r = !1,
            t,
            l = {},
            A = { imageSize: "square" },
            x = { up_arrow: 38, down_arrow: 40, tab: 9 };
        return {
            init: function () {
                if (!document.getElementById("shopify-features") || JSON.parse(document.getElementById("shopify-features").innerHTML).predictiveSearch)
                    (l.wrapper = document.querySelector("#PredictiveWrapper")),
                        l.wrapper &&
                            ((A.imageSize = l.wrapper.dataset.imageSize),
                            (l.form = document.querySelector("#HeaderSearchForm")),
                            l.form.setAttribute("autocomplete", "off"),
                            l.form.on("submit.predictive", a),
                            (l.input = l.form.querySelector('input[type="search"]')),
                            l.input.on("keyup.predictive", c),
                            (l.submit = l.wrapper.querySelector("[data-predictive-search-button]")),
                            l.submit.on("click.predictive", b),
                            (l.results = document.querySelector("#PredictiveResults")));
            },
        };
    })();
    theme.buildProductGridItem = function (d, b, a, c) {
        var e = "";
        d.forEach((f) => {
            var g = theme.buildProductImage(f, c);
            e += `
        <div class="grid__item grid-product ${b} aos-animate" data-aos="row-of-${a}">
          <div class="grid-product__content">
            <a href="${f.url}" class="grid-product__link">
              <div class="grid-product__image-mask">
                ${g}
              </div>
              <div class="grid-product__meta">
                <div class="grid-product__title">${f.title}</div>
              </div>
            </a>
          </div>
        </div>
      `;
        });
        return e;
    };
    theme.buildProductImage = function (d, b) {
        b = b ? b : theme.settings.productImageSize;
        if ("natural" === b)
            d = `
        <div class="image-wrap" style="height: 0; padding-bottom: ${d.image_aspect_ratio}%;">
          <img class="grid-product__image lazyload"
            data-src="${d.image_responsive_url}"
            data-widths="[180, 360, 540, 720, 900]"
            data-aspectratio="${d.image_aspect_ratio}"
            data-sizes="auto"
            alt="${d.title}">
        </div>`;
        else {
            var a = "lazyload";
            theme.settings.productImageCover || (a += " grid__image-contain");
            d = `
        <div class="grid__image-ratio grid__image-ratio--${b}">
          <img class="${a}"
              data-src="${d.image_responsive_url}"
              data-widths="[360, 540, 720, 900, 1080]"
              data-aspectratio="${d.aspect_ratio}"
              data-sizes="auto"
              alt="${d.title}">
        </div>
      `;
        }
        return d;
    };
    theme.buildCollectionItem = function (d) {
        var b = "";
        d.forEach((a) => {
            b += `
        <li>
          <a href="${a.url}">
            ${a.title}
          </a>
        </li>
      `;
        });
        return b;
    };
    theme.buildPageItem = function (d) {
        var b = "";
        d.forEach((a) => {
            b += `
        <li>
          <a href="${a.url}">
            ${a.title}
          </a>
        </li>
      `;
        });
        return b;
    };
    theme.buildArticleItem = function (d, b) {
        var a = "";
        d.forEach((c) => {
            var e = theme.buildPredictiveImage(c);
            a += `
        <div class="grid__item grid-product small--one-half medium-up--one-quarter" data-aos="row-of-4">
          <a href="${c.url}" class="grid-product__link grid-product__link--inline">
            <div class="grid-product__image-mask">
              <div
                class="grid__image-ratio grid__image-ratio--object grid__image-ratio--${b}">
                <div class="predictive__image-wrap">
                  ${e}
                </div>
              </div>
            </div>
            <div class="grid-product__meta">
              ${c.title}
            </div>
          </a>
        </div>
      `;
        });
        return a;
    };
    theme.buildPredictiveImage = function (d) {
        var b = "";
        d.image &&
            (b = `<img class="lazyload"
            data-src="${d.image}"
            data-widths="[360, 540, 720]"
            data-sizes="auto">`);
        return b;
    };
    theme.Maps = (function () {
        var d, b, a;
        function c(q) {
            this.container = q;
            this.sectionId = this.container.getAttribute("data-section-id");
            this.namespace = ".map-" + this.sectionId;
            this.map = q.querySelector(n.map);
            this.key = this.map.dataset.apiKey;
            d = theme.strings.addressNoResults;
            b = theme.strings.addressQueryLimit;
            a = theme.strings.addressError;
            m = theme.strings.authError;
            this.key && theme.initWhenVisible({ element: this.container, callback: this.prepMapApi.bind(this), threshold: 20 });
        }
        function e() {
            h.forEach((q) => {
                q.createMap();
            });
        }
        function f(q) {
            var r = new google.maps.Geocoder();
            if (q) {
                var t = q.dataset.addressSetting;
                return new Promise((l, A) => {
                    r.geocode({ address: t }, function (x, k) {
                        k !== google.maps.GeocoderStatus.OK && A(k);
                        l(x);
                    });
                });
            }
        }
        var g = null,
            h = [];
        var m = (a = b = d = void 0);
        var n = { section: '[data-section-type="map"]', map: "[data-map]", mapOverlay: ".map-section__overlay" };
        window.gm_authFailure = function () {
            Shopify.designMode &&
                (document.querySelectorAll(n.section).forEach((q) => {
                    q.classList.add("map-section--load-error");
                }),
                document.querySelectorAll(n.map).forEach((q) => {
                    q.parentNode.removeChild(q);
                }),
                window.mapError(theme.strings.authError));
        };
        window.mapError = function (q) {
            var r = document.createElement("div");
            r.classList.add("map-section__error", "errors", "text-center");
            r.innerHTML = q;
            document.querySelectorAll(n.mapOverlay).forEach((t) => {
                t.parentNode.prepend(r);
            });
            document.querySelectorAll(".map-section__link").forEach((t) => {
                t.classList.add("hide");
            });
        };
        c.prototype = Object.assign({}, c.prototype, {
            prepMapApi: function () {
                if ("loaded" === g) this.createMap();
                else if ((h.push(this), "loading" !== g && ((g = "loading"), "undefined" === typeof window.google || "undefined" === typeof window.google.maps))) {
                    var q = document.createElement("script");
                    q.onload = function () {
                        g = "loaded";
                        e();
                    };
                    q.src = "https://maps.googleapis.com/maps/api/js?key=" + this.key;
                    document.head.appendChild(q);
                }
            },
            createMap: function () {
                var q = this.map;
                return f(q)
                    .then(
                        function (r) {
                            var t = (this.map = new google.maps.Map(q, {
                                    zoom: 14,
                                    backgroundColor: "none",
                                    center: r[0].geometry.location,
                                    draggable: !1,
                                    clickableIcons: !1,
                                    scrollwheel: !1,
                                    disableDoubleClickZoom: !0,
                                    disableDefaultUI: !0,
                                })),
                                l = (this.center = t.getCenter());
                            new google.maps.Marker({ map: t, position: t.getCenter() });
                            google.maps.event.addDomListener(
                                window,
                                "resize",
                                theme.utils.debounce(250, function () {
                                    google.maps.event.trigger(t, "resize");
                                    t.setCenter(l);
                                    q.removeAttribute("style");
                                })
                            );
                            Shopify.designMode && window.AOS && AOS.refreshHard();
                        }.bind(this)
                    )
                    .catch(function (r) {
                        switch (r) {
                            case "ZERO_RESULTS":
                                r = d;
                                break;
                            case "OVER_QUERY_LIMIT":
                                r = b;
                                break;
                            case "REQUEST_DENIED":
                                r = m;
                                break;
                            default:
                                r = a;
                        }
                        Shopify.designMode && window.mapError(r);
                    });
            },
            onUnload: function () {
                0 !== this.map.length && google && google.maps && google.maps.event && google.maps.event.clearListeners(this.map, "resize");
            },
        });
        return c;
    })();
    theme.NewsletterPopup = (function () {
        function d(b) {
            this.container = b;
            var a = this.container.getAttribute("data-section-id");
            this.cookieName = "newsletter-" + a;
            this.cookie = Cookies.get(this.cookieName);
            b &&
                "/challenge" !== window.location.pathname &&
                "/password" !== window.location.pathname &&
                ((this.data = { secondsBeforeShow: b.dataset.delaySeconds, daysBeforeReappear: b.dataset.delayDays, hasReminder: b.dataset.hasReminder, testMode: b.dataset.testMode, isEnabled: b.dataset.enabled }),
                (this.modal = new theme.Modals("NewsletterPopup-" + a, "newsletter-popup-modal")),
                (a = b.querySelector(".popup-cta a")) &&
                    a.addEventListener(
                        "click",
                        function () {
                            this.closePopup(!0);
                        }.bind(this)
                    ),
                (b.querySelector(".errors") || b.querySelector(".note--success")) && this.modal.open(),
                b.querySelector(".note--success")
                    ? this.closePopup(!0)
                    : (document.addEventListener("modalClose." + b.id, this.closePopup.bind(this)),
                      this.cookie || "true" !== this.data.isEnabled || this.initPopupDelay(),
                      document.addEventListener("reminder:openNewsletter", () => {
                          this.modal.open();
                      })));
        }
        d.prototype = Object.assign({}, d.prototype, {
            initPopupDelay: function () {
                "true" !== this.data.testMode &&
                    setTimeout(
                        function () {
                            this.modal.open();
                        }.bind(this),
                        1e3 * this.data.secondsBeforeShow
                    );
            },
            closePopup: function (b) {
                if ("true" === this.data.testMode) Cookies.remove(this.cookieName, { path: "/" });
                else {
                    b = b ? 200 : this.data.daysBeforeReappear;
                    var a = "true" === this.data.hasReminder,
                        c = "true" === sessionStorage.getItem("newsletterAppeared");
                    a && c ? Cookies.set(this.cookieName, "opened", { path: "/", expires: b }) : a || Cookies.set(this.cookieName, "opened", { path: "/", expires: b });
                }
            },
            onLoad: function () {
                this.modal.open();
            },
            onSelect: function () {
                this.modal.open();
            },
            onDeselect: function () {
                this.modal.close();
            },
            onBlockSelect: function () {
                this.modal.close();
            },
            onBlockDeselect: function () {
                this.modal.open();
            },
        });
        return d;
    })();
    theme.PasswordHeader = (function () {
        function d() {
            this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                if (document.querySelector("#LoginModal")) {
                    var b = new theme.Modals("LoginModal", "login-modal", { focusIdOnOpen: "password", solid: !0 });
                    document.querySelectorAll(".errors").length && b.open();
                }
            },
        });
        return d;
    })();
    theme.Photoswipe = (function () {
        function d(b, a) {
            this.container = b;
            this.sectionId = a;
            this.namespace = ".photoswipe-" + this.sectionId;
            this.gallery;
            this.images;
            this.items;
            this.inSlideshow = !1;
            b && "false" !== b.dataset.zoom && this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.container.querySelectorAll(".js-photoswipe__zoom").forEach((b) => {
                    b.on("click" + this.namespace, this.triggerClick.bind(this));
                });
            },
            triggerClick: function (b) {
                this.inSlideshow = this.container.dataset && "true" === this.container.dataset.hasSlideshow ? !0 : !1;
                this.items = this.getImageData();
                b = this.inSlideshow ? this.container.querySelector(".is-selected") : b.currentTarget;
                b = this.inSlideshow ? this.getChildIndex(b) : b.dataset.index;
                this.initGallery(this.items, b);
            },
            getChildIndex: function (b) {
                for (var a = 0; null != (b = b.previousSibling); ) a++;
                return a + 1;
            },
            getImageData: function () {
                this.images = this.inSlideshow ? this.container.querySelectorAll(".flickity-viewport .photoswipe__image") : this.container.querySelectorAll(".photoswipe__image");
                var b = [];
                this.images.forEach((a) => {
                    a = { msrc: a.currentSrc || a.src, src: a.getAttribute("data-photoswipe-src"), w: a.getAttribute("data-photoswipe-width"), h: a.getAttribute("data-photoswipe-height"), el: a, initialZoomLevel: 0.5 };
                    b.push(a);
                });
                return b;
            },
            initGallery: function (b, a) {
                var c = document.querySelectorAll(".pswp")[0];
                this.gallery = new PhotoSwipe(c, PhotoSwipeUI_Default, b, {
                    allowPanToNext: !1,
                    captionEl: !1,
                    closeOnScroll: !1,
                    counterEl: !1,
                    history: !1,
                    index: a - 1,
                    pinchToClose: !1,
                    preloaderEl: !1,
                    scaleMode: "zoom",
                    shareEl: !1,
                    tapToToggleControls: !1,
                    getThumbBoundsFn: function (e) {
                        var f = window.pageYOffset || document.documentElement.scrollTop;
                        e = b[e].el.getBoundingClientRect();
                        return { x: e.left, y: e.top + f, w: e.width };
                    },
                });
                this.gallery.listen("afterChange", this.afterChange.bind(this));
                this.gallery.init();
                this.preventiOS15Scrolling();
            },
            afterChange: function () {
                var b = this.gallery.getCurrentIndex();
                this.container.dispatchEvent(new CustomEvent("photoswipe:afterChange", { detail: { index: b } }));
            },
            syncHeight: function () {
                document.documentElement.style.setProperty("--window-inner-height", `${window.innerHeight}px`);
            },
            preventiOS15Scrolling: function () {
                let b;
                /iPhone|iPad|iPod/i.test(window.navigator.userAgent) &&
                    (this.syncHeight(),
                    (b = window.scrollY),
                    document.documentElement.classList.add("pswp-open-in-ios"),
                    window.addEventListener("resize", this.syncHeight),
                    this.gallery.listen("destroy", () => {
                        document.documentElement.classList.remove("pswp-open-in-ios");
                        window.scrollTo(0, b);
                    }));
            },
        });
        return d;
    })();
    theme.Recommendations = (function () {
        function d(a) {
            this.container = a;
            this.sectionId = a.getAttribute("data-section-id");
            this.url = a.dataset.url;
            b = "Recommendations-" + this.sectionId;
            theme.initWhenVisible({ element: a, callback: this.init.bind(this), threshold: 500 });
        }
        var b = void 0;
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                var a = document.getElementById(b);
                if (a && "false" !== a.dataset.enable) {
                    var c = this.url + "?section_id=product-recommendations&limit=" + a.dataset.limit + "&product_id=" + a.dataset.productId;
                    if (Shopify.designMode) {
                        var e = a.querySelector(" .product-recommendations");
                        e && (e.innerHTML = "");
                    }
                    fetch(c)
                        .then(function (f) {
                            return f.text();
                        })
                        .then(
                            function (f) {
                                f = new DOMParser().parseFromString(f, "text/html").querySelector(" .product-recommendations");
                                var g = a.querySelector(".product-recommendations-placeholder");
                                g &&
                                    ((g.innerHTML = ""),
                                    f
                                        ? (g.appendChild(f),
                                          theme.reinitProductGridItem(a),
                                          document.dispatchEvent(new CustomEvent("recommendations:loaded", { detail: { section: a } })),
                                          0 === f.querySelectorAll(".grid-product").length && this.container.classList.add("hide"))
                                        : (this.container.classList.add("hide"), AOS && AOS.refreshHard()));
                            }.bind(this)
                        );
                }
            },
        });
        return d;
    })();
    theme.SlideshowSection = (function () {
        function d(b) {
            this.container = b;
            var a = b.getAttribute("data-section-id");
            this.slideshow = b.querySelector("#Slideshow-" + a);
            this.namespace = "." + a;
            this.initialIndex = 0;
            this.slideshow && ((b = b.parentElement), 0 === [].indexOf.call(b.parentElement.children, b) ? this.init() : theme.initWhenVisible({ element: this.container, callback: this.init.bind(this) }));
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                var b = this.slideshow.querySelectorAll(".slideshow__slide");
                this.container.hasAttribute("data-immediate-load") ? (this.slideshow.classList.remove("loading", "loading--delayed"), this.slideshow.classList.add("loaded")) : theme.loadImageSection(this.slideshow);
                1 < b.length
                    ? ((b = {
                          prevNextButtons: this.slideshow.hasAttribute("data-arrows"),
                          pageDots: this.slideshow.hasAttribute("data-dots"),
                          fade: !0,
                          setGallerySize: !1,
                          initialIndex: this.initialIndex,
                          autoPlay: "true" === this.slideshow.dataset.autoplay ? parseInt(this.slideshow.dataset.speed) : !1,
                      }),
                      (this.flickity = new theme.Slideshow(this.slideshow, b)))
                    : b[0].classList.add("is-selected");
                this.container.hasAttribute("data-parallax") &&
                    this.container.querySelectorAll(".parallax-container").forEach(
                        function (a, c) {
                            new theme.Parallax(a, { namespace: this.namespace + "-parallax-" + c });
                        }.bind(this)
                    );
            },
            forceReload: function () {
                this.onUnload();
                this.init();
            },
            onUnload: function () {
                this.flickity && "function" === typeof this.flickity.destroy && this.flickity.destroy();
            },
            onDeselect: function () {
                this.flickity && "function" === typeof this.flickity.play && this.flickity.play();
            },
            onBlockSelect: function (b) {
                b = this.slideshow.querySelector(".slideshow__slide--" + b.detail.blockId);
                b = parseInt(b.dataset.index);
                this.flickity && "function" === typeof this.flickity.pause
                    ? (this.flickity.goToSlide(b), this.flickity.pause())
                    : ((this.initialIndex = b),
                      setTimeout(
                          function () {
                              this.flickity && "function" === typeof this.flickity.pause && this.flickity.pause();
                          }.bind(this),
                          1e3
                      ));
            },
            onBlockDeselect: function () {
                this.flickity && "function" === typeof this.flickity.play && this.flickity.args.autoPlay && this.flickity.play();
            },
        });
        return d;
    })();
    theme.StoreAvailability = (function () {
        function d(b) {
            this.container = b;
            this.baseUrl = b.dataset.baseUrl;
            this.productTitle = b.dataset.productName;
        }
        d.prototype = Object.assign({}, d.prototype, {
            updateContent: function (b) {
                var a = this;
                fetch(this.baseUrl + "/variants/" + b + "/?section_id=store-availability")
                    .then(function (c) {
                        return c.text();
                    })
                    .then(function (c) {
                        if ("" === c.trim()) this.container.innerHTML = "";
                        else if (
                            ((a.container.innerHTML = c),
                            (a.container.innerHTML = a.container.firstElementChild.innerHTML),
                            a.container.querySelector(".js-drawer-open-availability") && (a.drawer = new theme.Drawers("StoreAvailabilityDrawer", "availability")),
                            a.container.querySelector(".js-modal-open-availability") && (a.modal = new theme.Modals("StoreAvailabilityModal", "availability")),
                            (c = a.container.querySelector("[data-availability-product-title]")))
                        )
                            c.textContent = a.productTitle;
                    });
            },
        });
        return d;
    })();
    theme.VideoSection = (function () {
        function d(b) {
            this.container = b;
            this.sectionId = b.getAttribute("data-section-id");
            this.namespace = ".video-" + this.sectionId;
            this.videoObject;
            theme.initWhenVisible({ element: this.container, callback: this.init.bind(this), threshold: 500 });
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                var b = this.container.querySelector(".video-div");
                if (b)
                    switch (b.dataset.type) {
                        case "youtube":
                            b = b.dataset.videoId;
                            this.initYoutubeVideo(b);
                            break;
                        case "vimeo":
                            b = b.dataset.videoId;
                            this.initVimeoVideo(b);
                            break;
                        case "mp4":
                            this.initMp4Video();
                    }
            },
            initYoutubeVideo: function (b) {
                this.videoObject = new theme.YouTube("YouTubeVideo-" + this.sectionId, { videoId: b, videoParent: ".video-parent-section" });
            },
            initVimeoVideo: function (b) {
                this.videoObject = new theme.VimeoPlayer("Vimeo-" + this.sectionId, b, { videoParent: ".video-parent-section" });
            },
            initMp4Video: function () {
                var b = "Mp4Video-" + this.sectionId,
                    a = document.getElementById(b),
                    c = a.closest(".video-parent-section");
                a &&
                    (c.classList.add("loaded"),
                    (b = document.querySelector("#" + b).play()),
                    void 0 !== b &&
                        b
                            .then(function () {})
                            .catch(function () {
                                a.setAttribute("controls", "");
                                c.classList.add("video-interactable");
                            }));
            },
            onUnload: function (b) {
                b.target.id.replace("shopify-section-", "");
                this.videoObject && "function" === typeof this.videoObject.destroy && this.videoObject.destroy();
            },
        });
        return d;
    })();
    theme.BackgroundImage = (function () {
        function d(b) {
            if ((this.container = b)) (this.namespace = "." + b.getAttribute("data-section-id")), theme.initWhenVisible({ element: this.container, callback: this.init.bind(this) });
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                if (this.container.dataset && this.container.dataset.parallax) {
                    var b = this.container.querySelector(".parallax-container");
                    theme.parallaxSections[this.namespace] = new theme.Parallax(b, { namespace: this.namespace + "-parallax", desktopOnly: !0 });
                }
            },
            onUnload: function (b) {
                this.container &&
                    (theme.parallaxSections[this.namespace] && "function" === typeof theme.parallaxSections[this.namespace].destroy && theme.parallaxSections[this.namespace].destroy(), delete theme.parallaxSections[this.namespace]);
            },
        });
        return d;
    })();
    theme.Blog = (function () {
        function d(b) {
            this.tagFilters();
        }
        d.prototype = Object.assign({}, d.prototype, {
            tagFilters: function () {
                var b = document.getElementById("BlogTagFilter");
                b &&
                    b.addEventListener("change", function () {
                        location.href = b.value;
                    });
            },
        });
        return d;
    })();
    theme.CollectionHeader = (function () {
        function d(a) {
            this.namespace = ".collection-header";
            var c = a.querySelector(".collection-hero");
            c
                ? (b && this.checkIfNeedReload(),
                  theme.loadImageSection(c),
                  a.dataset && a.dataset.parallax && ((a = a.querySelector(".parallax-container")), (theme.parallaxSections[this.namespace] = new theme.Parallax(a, { namespace: this.namespace + "-parallax" }))))
                : theme.settings.overlayHeader && theme.headerNav.disableOverlayHeader();
            b = !0;
        }
        var b = !1;
        d.prototype = Object.assign({}, d.prototype, {
            checkIfNeedReload: function () {
                Shopify.designMode && theme.settings.overlayHeader && (document.querySelector(".header-wrapper").classList.contains("header-wrapper--overlay") || location.reload());
            },
            onUnload: function () {
                theme.parallaxSections[this.namespace] && (theme.parallaxSections[this.namespace].destroy(), delete theme.parallaxSections[this.namespace]);
            },
        });
        return d;
    })();
    theme.CollectionSidebar = (function () {
        function d(c) {
            this.container = c.querySelector(a.sidebar);
        }
        var b = !1,
            a = { sidebar: "#CollectionSidebar" };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.container && (this.onUnload(), (b = "drawer" === this.container.dataset.style), (theme.FilterDrawer = new theme.Drawers("FilterDrawer", "collection-filters", !0)));
            },
            forceReload: function () {
                this.init();
            },
            onSelect: function () {
                theme.FilterDrawer && (b ? (b || theme.config.bpSmall) && theme.FilterDrawer.open() : theme.FilterDrawer.close());
            },
            onDeselect: function () {
                theme.FilterDrawer && theme.FilterDrawer.close();
            },
            onUnload: function () {
                theme.FilterDrawer && theme.FilterDrawer.close();
            },
        });
        return d;
    })();
    theme.Collection = (function () {
        function d(a) {
            this.container = a;
            this.sectionId = a.getAttribute("data-section-id");
            this.namespace = ".collection-" + this.sectionId;
            this.sidebar = new theme.CollectionSidebar(a);
            this.ajaxRenderer = new theme.AjaxRenderer({ sections: [{ sectionId: this.sectionId, nodeId: "CollectionAjaxContent" }], onReplace: this.onReplaceAjaxContent.bind(this) });
            this.init();
        }
        var b = !1;
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.initSort();
                this.colorSwatchHovering();
                this.initFilters();
                this.initPriceRange();
                this.sidebar.init();
            },
            initSort: function () {
                if ((this.sortSelect = document.querySelector("#SortBy"))) (this.defaultSort = this.getDefaultSortValue()), this.sortSelect.on("change" + this.namespace, this.onSortChange.bind(this));
            },
            getSortValue: function () {
                return this.sortSelect.value || this.defaultSort;
            },
            getDefaultSortValue: function () {
                return this.sortSelect.getAttribute("data-default-sortby");
            },
            onSortChange: function () {
                this.queryParams = new URLSearchParams(window.location.search);
                this.queryParams.set("sort_by", this.getSortValue());
                this.queryParams.delete("page");
                window.location.search = this.queryParams.toString();
            },
            colorSwatchHovering: function () {
                this.container.querySelectorAll(".grid-product__color-image").length &&
                    this.container.querySelectorAll(".color-swatch--with-image").forEach((a) => {
                        a.addEventListener("mouseenter", function () {
                            var c = a.dataset.variantImage,
                                e = document.querySelector(".grid-product__color-image--" + a.dataset.variantId);
                            e.style.backgroundImage = "url(" + c + ")";
                            e.classList.add("is-active");
                        });
                        a.addEventListener("mouseleave", function () {
                            document.querySelector(".grid-product__color-image--" + a.dataset.variantId).classList.remove("is-active");
                        });
                    });
            },
            initFilters: function () {
                document.querySelectorAll(".tag-list input").length &&
                    (this.bindBackButton(),
                    theme.config.stickyHeader && (this.setFilterStickyPosition(), window.on("resize", theme.utils.debounce(500, this.setFilterStickyPosition))),
                    document.querySelectorAll(".tag-list a").forEach((a) => {
                        a.addEventListener("click", this.tagClick.bind(this));
                    }),
                    document.querySelectorAll(".filter-form").forEach((a) => {
                        a.addEventListener("input", this.onFormSubmit.bind(this));
                    }));
            },
            initPriceRange: function () {
                document.querySelectorAll(".price-range").forEach((a) => new theme.PriceRange(a, { onChange: this.renderFromFormData.bind(this) }));
            },
            tagClick: function (a) {
                var c = a.currentTarget;
                theme.FilterDrawer && theme.FilterDrawer.close();
                if (!c.classList.contains("no-ajax") && (a.preventDefault(), !b)) {
                    b = !0;
                    a = c.parentNode;
                    var e = new URL(c.href);
                    this.renderActiveTag(a, c);
                    this.updateScroll(!0);
                    this.startLoading();
                    this.renderCollectionPage(e.searchParams);
                }
            },
            onFormSubmit: function (a) {
                var c = a.target;
                theme.FilterDrawer && theme.FilterDrawer.close();
                if (!c.classList.contains("no-ajax") && (a.preventDefault(), !b)) {
                    b = !0;
                    a = c.closest("li");
                    var e = c.closest("form");
                    e = new FormData(e);
                    this.renderActiveTag(a, c);
                    this.updateScroll(!0);
                    this.startLoading();
                    this.renderFromFormData(e);
                }
            },
            fetchOpenCollasibleFilters: function () {
                return Array.from(document.querySelectorAll("#CollectionSidebar .collapsible-trigger.is-open")).map((a) => a.dataset.collapsibleId);
            },
            renderActiveTag: function (a, c) {
                const e = a.querySelector(".tag__text");
                a.classList.contains("tag--active")
                    ? a.classList.remove("tag--active")
                    : (a.classList.add("tag--active"),
                      c.closest("li").classList.contains("tag--remove")
                          ? a.remove()
                          : document.querySelectorAll(".tag-list--active-tags").forEach((f) => {
                                const g = document.createElement("li"),
                                    h = document.createElement("a");
                                g.classList.add("tag", "tag--remove");
                                h.classList.add("btn", "btn--small");
                                h.innerText = e.innerText;
                                g.appendChild(h);
                                f.appendChild(g);
                            }));
            },
            renderFromFormData: function (a) {
                a = new URLSearchParams(a);
                this.renderCollectionPage(a);
            },
            onReplaceAjaxContent: function (a, c) {
                this.fetchOpenCollasibleFilters().forEach((f) => {
                    a.querySelectorAll(`[data-collapsible-id=${f}]`).forEach(this.openCollapsible);
                });
                var e = a.getElementById(c.nodeId);
                e && (document.getElementById(c.nodeId).innerHTML = e.innerHTML);
            },
            openCollapsible: function (a) {
                a.classList.contains("collapsible-content--sidebar") && (a.style.height = "auto");
                a.classList.add("is-open");
            },
            renderCollectionPage: function (a, c = !0) {
                this.ajaxRenderer.renderPage(window.location.pathname, a, c).then(() => {
                    theme.sections.reinit("collection-grid");
                    this.updateScroll(!1);
                    this.initPriceRange();
                    theme.reinitProductGridItem();
                    document.dispatchEvent(new CustomEvent("collection:reloaded"));

                   const loadMoreBtn = document.getElementById("load-more");
  const productGrid = document.querySelector(".collection-grid__wrapper .grid"); // Update with the actual class of your product grid

                  if (loadMoreBtn) {
  loadMoreBtn.addEventListener("click", function() {
      console.log('innn clicked');
    const page = loadMoreBtn.getAttribute("data-page");
    var url;
    if (window.location.href.indexOf('?') != -1) {
      url = `${window.location.href}&page=${page}`;
    } else {
      url = `${window.location.href}?page=${page}`;
    }

    fetch(url)
      .then(response => response.text())
      .then(data => {
          console.log('data', data);
        const parser = new DOMParser();
        const htmlDoc = parser.parseFromString(data, "text/html");
        const newProducts = htmlDoc.querySelectorAll(".collection-grid__wrapper .grid__item"); // Update to match each product's class
        newProducts.forEach(product => {
          productGrid.appendChild(product);
        });

        // Increment the page number for the next load
        loadMoreBtn.setAttribute("data-page", parseInt(page) + 1);

        // Hide the Load More button if there are no more pages
        const nextPageLink = htmlDoc.querySelector(".pagination .next");
        if (!nextPageLink) {
          loadMoreBtn.style.display = "none";
        }
        theme.initQuickShop();

      })
    
      .catch(error => console.error("Error loading more products:", error));
  });
                  }
                  
      console.log($('.show-hide-filters'), 'iffff')
        $('.show-hide-filters').on('click', function() {
    // $('.grid__item--sidebar').toggle();
    $('.grid__item--sidebar').toggleClass('hide');
    $(this).toggleClass('hide-filters');
    $(this).toggleClass('show-filters');
    if($(this).hasClass('hide-filters')) {
        $(this).find('span').text('Hide filters');
    } else {
        $(this).find('span').text('Show filters');
    }
});
                  
                    b = !1;
                });
            },
            bindBackButton: function () {
                window.off("popstate" + this.namespace);
                window.on(
                    "popstate" + this.namespace,
                    function (a) {
                        a && ((a = new URL(window.location.href)), this.renderCollectionPage(a.searchParams, !1));
                    }.bind(this)
                );
            },
            updateScroll: function (a) {
                var c = document.querySelector("[data-scroll-to]");
                c = c && c.offsetTop;
                theme.config.bpSmall || (c -= 15);
                if (theme.config.stickyHeader) {
                    var e = document.querySelector(".site-header").offsetHeight;
                    c -= e;
                }
                a ? window.scrollTo({ top: c, behavior: "smooth" }) : window.scrollTo({ top: c });
            },
            setFilterStickyPosition: function () {
                var a = document.querySelector(".site-header").offsetHeight;
                document.querySelector(".collection-filter").style.top = a + 10 + "px";
                var c = document.querySelector(".grid__item--sidebar");
                c && (c.style.top = a + 10 + "px");
            },
            forceReload: function () {
                this.init();
            },
            startLoading: function () {
                document.querySelector(".collection-grid__wrapper").classList.add("unload");
            },
        });
        return d;
    })();
    theme.FooterSection = (function () {
        function d(b) {
            this.container = b;
            this.currencyDisclosure = this.localeDisclosure = null;
            this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                var b = this.container.querySelector("[data-disclosure-locale]"),
                    a = this.container.querySelector("[data-disclosure-currency]");
                b && (this.localeDisclosure = new theme.Disclosure(b));
                a && (this.currencyDisclosure = new theme.Disclosure(a));
                var c = document.querySelector(".footer__newsletter-input");
                c &&
                    c.addEventListener("keyup", function () {
                        c.classList.add("footer__newsletter-input--active");
                    });
                theme.collapsibles.init(this.container);
            },
            onUnload: function () {
                this.localeDisclosure && this.localeDisclosure.destroy();
                this.currencyDisclosure && this.currencyDisclosure.destroy();
            },
        });
        return d;
    })();
    theme.HeaderSection = (function () {
        function d(b) {
            this.container = b;
            this.sectionId = this.container.getAttribute("data-section-id");
            this.init();
        }
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                Shopify &&
                    Shopify.designMode &&
                    (theme.sections.reinit("slideshow-section"),
                    setTimeout(function () {
                        window.dispatchEvent(new Event("resize"));
                    }, 500));
                this.initDrawers();
                this.initDisclosures();
                theme.headerNav.init();
                theme.announcementBar.init();
            },
            initDisclosures: function () {
                var b = this.container.querySelector("[data-disclosure-locale]"),
                    a = this.container.querySelector("[data-disclosure-currency]");
                b && (this.localeDisclosure = new theme.Disclosure(b));
                a && (this.currencyDisclosure = new theme.Disclosure(a));
            },
            initDrawers: function () {
                theme.NavDrawer = new theme.Drawers("NavDrawer", "nav");
                "drawer" === theme.settings.cartType && (document.body.classList.contains("template-cart") || new theme.CartDrawer());
                theme.collapsibles.init(document.getElementById("NavDrawer"));
            },
            onBlockSelect: function (b) {
                theme.announcementBar.onBlockSelect(b.detail.blockId);
            },
            onBlockDeselect: function () {
                theme.announcementBar.onBlockDeselect();
            },
            onUnload: function () {
                theme.NavDrawer.close();
                theme.announcementBar.unload();
                this.localeDisclosure && this.localeDisclosure.destroy();
                this.currencyDisclosure && this.currencyDisclosure.destroy();
            },
        });
        return d;
    })();
    theme.Product = (function () {
        function d(a) {
            this.container = a;
            var c = (this.sectionId = a.getAttribute("data-section-id")),
                e = (this.productId = a.getAttribute("data-product-id"));
            this.inModal = "true" === a.dataset.modal;
            this.modal;
            this.settings = {
                enableHistoryState: a.dataset.history || !1,
                namespace: ".product-" + c,
                inventory: !1,
                inventoryThreshold: 10,
                modalInit: !1,
                hasImages: !0,
                imageSetName: null,
                imageSetIndex: null,
                currentImageSet: null,
                imageSize: "620x",
                currentSlideIndex: 0,
                videoLooping: a.dataset.videoLooping,
            };
            this.inModal && ((this.settings.enableHistoryState = !1), (this.settings.namespace = ".product-" + c + "-modal"), (this.modal = document.getElementById("QuickShopModal-" + e)));
            this.selectors = {
                variantsJson: "[data-variant-json]",
                currentVariantJson: "[data-current-variant-json]",
                form: ".product-single__form",
                media: "[data-product-media-type-model]",
                closeMedia: ".product-single__close-media",
                photoThumbs: "[data-product-thumb]",
                thumbSlider: "[data-product-thumbs]",
                thumbScroller: ".product__thumbs--scroller",
                mainSlider: "[data-product-photos]",
                imageContainer: "[data-product-images]",
                productImageMain: "[data-product-image-main]",
                priceWrapper: "[data-product-price-wrap]",
                price: "[data-product-price]",
                comparePrice: "[data-compare-price]",
                savePrice: "[data-save-price]",
                priceA11y: "[data-a11y-price]",
                comparePriceA11y: "[data-compare-price-a11y]",
                unitWrapper: "[data-unit-price-wrapper]",
                unitPrice: "[data-unit-price]",
                unitPriceBaseUnit: "[data-unit-base]",
                sku: "[data-sku]",
                inventory: "[data-product-inventory]",
                incomingInventory: "[data-incoming-inventory]",
                colorLabel: "[data-variant-color-label]",
                addToCart: "[data-add-to-cart]",
                addToCartText: "[data-add-to-cart-text]",
                originalSelectorId: "[data-product-select]",
                singleOptionSelector: "[data-variant-input]",
                variantColorSwatch: ".variant__input--color-swatch",
                availabilityContainer: "[data-store-availability-holder]",
            };
            this.cacheElements();
            this.firstProductImage = this.cache.mainSlider.querySelector("img");
            this.firstProductImage || (this.settings.hasImages = !1);
            if ((a = this.cache.mainSlider.querySelector("[data-set-name]"))) this.settings.imageSetName = a.dataset.setName;
            this.init();
        }
        var b = {};
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                this.inModal &&
                    (this.container.classList.add("is-modal"),
                    document.addEventListener("modalOpen.QuickShopModal-" + this.productId, this.openModalProduct.bind(this)),
                    document.addEventListener("modalClose.QuickShopModal-" + this.productId, this.closeModalProduct.bind(this)));
                this.inModal || (this.formSetup(), this.productSetup(), this.videoSetup(), this.initProductSlider(), this.customMediaListners(), this.addIdToRecentlyViewed());
            },
            cacheElements: function () {
                this.cache = {
                    form: this.container.querySelector(this.selectors.form),
                    mainSlider: this.container.querySelector(this.selectors.mainSlider),
                    thumbSlider: this.container.querySelector(this.selectors.thumbSlider),
                    thumbScroller: this.container.querySelector(this.selectors.thumbScroller),
                    productImageMain: this.container.querySelector(this.selectors.productImageMain),
                    priceWrapper: this.container.querySelector(this.selectors.priceWrapper),
                    comparePriceA11y: this.container.querySelector(this.selectors.comparePriceA11y),
                    comparePrice: this.container.querySelector(this.selectors.comparePrice),
                    price: this.container.querySelector(this.selectors.price),
                    savePrice: this.container.querySelector(this.selectors.savePrice),
                    priceA11y: this.container.querySelector(this.selectors.priceA11y),
                };
            },
            formSetup: function () {
                this.initQtySelector();
                this.initAjaxProductForm();
                this.availabilitySetup();
                this.initVariants();
                this.settings.imageSetName && this.updateImageSet();
            },
            availabilitySetup: function () {
                var a = this.container.querySelector(this.selectors.availabilityContainer);
                a && (this.storeAvailability = new theme.StoreAvailability(a));
            },
            productSetup: function () {
                this.setImageSizes();
                this.initImageZoom();
                this.initModelViewerLibraries();
                this.initShopifyXrLaunch();
                window.SPR && (SPR.initDomEls(), SPR.loadBadges());
            },
            setImageSizes: function () {
                if (this.settings.hasImages) {
                    var a = this.firstProductImage.currentSrc;
                    a && (this.settings.imageSize = theme.Images.imageSize(a));
                }
            },
            addIdToRecentlyViewed: function () {
                var a = this.container.getAttribute("data-product-handle"),
                    c = this.container.getAttribute("data-product-url"),
                    e = this.container.getAttribute("data-aspect-ratio"),
                    f = this.container.getAttribute("data-img-url");
                theme.recentlyViewed.recent.hasOwnProperty(a) && delete theme.recentlyViewed.recent[a];
                theme.recentlyViewed.recent[a] = { url: c, aspectRatio: e, featuredImage: f };
                theme.config.hasLocalStorage && window.localStorage.setItem("theme-recent", JSON.stringify(theme.recentlyViewed.recent));
            },
            initVariants: function () {
                var a = this.container.querySelector(this.selectors.variantsJson);
                if (a) {
                    this.variantsObject = JSON.parse(a.innerHTML);
                    a = {
                        container: this.container,
                        enableHistoryState: this.settings.enableHistoryState,
                        singleOptionSelector: this.selectors.singleOptionSelector,
                        originalSelectorId: this.selectors.originalSelectorId,
                        variants: this.variantsObject,
                    };
                    var c = this.container.querySelectorAll(this.selectors.variantColorSwatch);
                    c.length &&
                        c.forEach((e) => {
                            e.addEventListener(
                                "change",
                                function (f) {
                                    this.updateColorName(e.dataset.colorName, e.dataset.colorIndex);
                                }.bind(this)
                            );
                        });
                    this.variants = new theme.Variants(a);
                    this.storeAvailability &&
                        (this.storeAvailability.updateContent(this.variants.currentVariant ? this.variants.currentVariant.id : this.variants.variants[0].id),
                        this.container.on("variantChange" + this.settings.namespace, this.updateAvailability.bind(this)));
                    this.container.on("variantChange" + this.settings.namespace, this.updateCartButton.bind(this));
                    this.container.on("variantImageChange" + this.settings.namespace, this.updateVariantImage.bind(this));
                    this.container.on("variantPriceChange" + this.settings.namespace, this.updatePrice.bind(this));
                    this.container.on("variantUnitPriceChange" + this.settings.namespace, this.updateUnitPrice.bind(this));
                    if (this.container.querySelector(this.selectors.sku)) this.container.on("variantSKUChange" + this.settings.namespace, this.updateSku.bind(this));
                    if ((a = this.container.querySelector(this.selectors.inventory)))
                        (this.settings.inventory = !0), (this.settings.inventoryThreshold = a.dataset.threshold), this.container.on("variantChange" + this.settings.namespace, this.updateInventory.bind(this));
                    theme.settings.dynamicVariantsEnable &&
                        (a = this.container.querySelector(this.selectors.currentVariantJson)) &&
                        (c = this.container.querySelector(".variant-wrapper")) &&
                        new theme.VariantAvailability({ container: this.container, namespace: this.settings.namespace, type: c.dataset.type, variantsObject: this.variantsObject, currentVariantObject: JSON.parse(a.innerHTML) });
                    this.settings.imageSetName &&
                        ((a = this.container.querySelector('.variant-input-wrap[data-handle="' + this.settings.imageSetName + '"]'))
                            ? ((this.settings.imageSetIndex = a.dataset.index), this.container.on("variantChange" + this.settings.namespace, this.updateImageSet.bind(this)))
                            : (this.settings.imageSetName = null));
                }
            },
            initQtySelector: function () {
                this.container.querySelectorAll(".js-qty__wrapper").forEach((a) => {
                    new theme.QtySelector(a, { namespace: ".product" });
                });
            },
            initAjaxProductForm: function () {
                "drawer" === theme.settings.cartType && new theme.AjaxProduct(this.cache.form);
            },
            updateColorName: function (a, c) {
                this.container.querySelector(this.selectors.colorLabel + `[data-index="${c}"`).textContent = a;
            },
            updateCartButton: function (a) {
                a = a.detail.variant;
                var c = this.container.querySelector(this.selectors.addToCart),
                    e = this.container.querySelector(this.selectors.addToCartText);
                a
                    ? a.available
                        ? (c.classList.remove("disabled"), (c.disabled = !1), (e.textContent = e.dataset.defaultText))
                        : (c.classList.add("disabled"), (c.disabled = !0), (e.textContent = theme.strings.soldOut))
                    : (c.classList.add("disabled"), (c.disabled = !0), (e.textContent = theme.strings.unavailable));
            },
            updatePrice: function (a) {
                if ((a = a.detail.variant))
                    if (((this.cache.price.innerHTML = theme.Currency.formatMoney(a.price, theme.settings.moneyFormat)), a.compare_at_price > a.price)) {
                        this.cache.comparePrice.innerHTML = theme.Currency.formatMoney(a.compare_at_price, theme.settings.moneyFormat);
                        this.cache.priceWrapper.classList.remove("hide");
                        this.cache.price.classList.add("on-sale");
                        this.cache.comparePriceA11y.setAttribute("aria-hidden", "false");
                        this.cache.priceA11y.setAttribute("aria-hidden", "false");
                        var c = a.compare_at_price - a.price;
                        c = "percent" == theme.settings.saveType ? Math.round((100 * c) / a.compare_at_price) + "%" : theme.Currency.formatMoney(c, theme.settings.moneyFormat);
                        this.cache.savePrice.classList.remove("hide");
                        this.cache.savePrice.innerHTML = theme.strings.savePrice.replace("[saved_amount]", c);
                    } else
                        this.cache.priceWrapper && this.cache.priceWrapper.classList.add("hide"),
                            this.cache.savePrice.classList.add("hide"),
                            this.cache.price.classList.remove("on-sale"),
                            this.cache.comparePriceA11y && this.cache.comparePriceA11y.setAttribute("aria-hidden", "true"),
                            this.cache.priceA11y.setAttribute("aria-hidden", "true");
            },
            updateUnitPrice: function (a) {
                (a = a.detail.variant) && a.unit_price
                    ? ((this.container.querySelector(this.selectors.unitPrice).innerHTML = theme.Currency.formatMoney(a.unit_price, theme.settings.moneyFormat)),
                      (this.container.querySelector(this.selectors.unitPriceBaseUnit).innerHTML = theme.Currency.getBaseUnit(a)),
                      this.container.querySelector(this.selectors.unitWrapper).classList.remove("hide"))
                    : this.container.querySelector(this.selectors.unitWrapper).classList.add("hide");
            },
            imageSetArguments: function (a) {
                if ((a = a ? a : this.variants ? this.variants.currentVariant : null))
                    return (
                        (a = this.settings.currentImageSet = this.getImageSetName(a[this.settings.imageSetIndex])),
                        (a = this.settings.imageSetName + "_" + a),
                        (this.settings.currentSlideIndex = 0),
                        { cellSelector: '[data-group="' + a + '"]', imageSet: a, initialIndex: this.settings.currentSlideIndex }
                    );
            },
            updateImageSet: function (a) {
                if ((a = a ? a.detail.variant : this.variants ? this.variants.currentVariant : null)) {
                    var c = this.getImageSetName(a[this.settings.imageSetIndex]);
                    this.settings.currentImageSet !== c && this.initProductSlider(a);
                }
            },
            updateImageSetThumbs: function (a) {
                this.cache.thumbSlider.querySelectorAll(".product__thumb-item").forEach((c) => {
                    c.classList.toggle("hide", c.dataset.group !== a);
                });
            },
            getImageSetName: function (a) {
                return a
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, "-")
                    .replace(/-$/, "")
                    .replace(/^-/, "");
            },
            updateSku: function (a) {
                a = a.detail.variant;
                var c = "";
                a && (a.sku && (c = a.sku), (this.container.querySelector(this.selectors.sku).textContent = c));
            },
            updateInventory: function (a) {
                a = a.detail.variant;
                if (!a || !a.inventory_management || "continue" === a.inventory_policy) this.toggleInventoryQuantity(a, !1), this.toggleIncomingInventory(!1);
                else if ("shopify" === a.inventory_management && window.inventories && window.inventories[this.productId]) {
                    var c = window.inventories[this.productId][a.id];
                    if ("continue" === c.policy) this.toggleInventoryQuantity(a, !1), this.toggleIncomingInventory(!1);
                    else {
                        var e = c.quantity,
                            f = !0,
                            g = !1;
                        if (0 >= e || e > this.settings.inventoryThreshold) f = !1;
                        this.toggleInventoryQuantity(a, f, e);
                        !f && "true" === c.incoming && e <= this.settings.inventoryThreshold && (g = !0);
                        this.toggleIncomingInventory(g, a.available, c.next_incoming_date);
                    }
                }
            },
            updateAvailability: function (a) {
                (a = a.detail.variant) && this.storeAvailability.updateContent(a.id);
            },
            toggleInventoryQuantity: function (a, c, e) {
                c = this.container.querySelector(this.selectors.inventory);
                var f = c.closest(".product-block");
                parseInt(e) <= parseInt(this.settings.inventoryThreshold)
                    ? (c.parentNode.classList.add("inventory--low"), (c.textContent = theme.strings.stockLabel.replace("[count]", e)))
                    : (c.parentNode.classList.remove("inventory--low"), (c.textContent = theme.strings.inStockLabel));
                a && a.available ? (c.parentNode.classList.remove("hide"), f && f.classList.remove("hide")) : (c.parentNode.classList.add("hide"), f && f.classList.add("hide"));
            },
            toggleIncomingInventory: function (a, c, e) {
                var f = this.container.querySelector(this.selectors.incomingInventory),
                    g = f.closest(".product-block");
                if (f) {
                    var h = f.querySelector(".js-incoming-text");
                    a
                        ? ((a = c ? theme.strings.willNotShipUntil.replace("[date]", e) : theme.strings.willBeInStockAfter.replace("[date]", e)),
                          e || (a = theme.strings.waitingForStock),
                          f.classList.remove("hide"),
                          g && g.classList.remove("hide"),
                          (h.textContent = a))
                        : f.classList.add("hide");
                }
            },
            videoSetup: function () {
                var a = this.cache.mainSlider.querySelectorAll(".product__video");
                if (!a.length) return !1;
                a.forEach((c) => {
                    var e = c.dataset.videoType;
                    "youtube" === e ? this.initYoutubeVideo(c) : "mp4" === e && this.initMp4Video(c);
                });
            },
            initYoutubeVideo: function (a) {
                b[a.id] = new theme.YouTube(a.id, {
                    videoId: a.dataset.youtubeId,
                    videoParent: ".product__video-wrapper",
                    autoplay: !1,
                    style: a.dataset.videoStyle,
                    loop: a.dataset.videoLoop,
                    events: { onReady: this.youtubePlayerReady.bind(this), onStateChange: this.youtubePlayerStateChange.bind(this) },
                });
            },
            youtubePlayerReady: function (a) {
                a = a.target.getIframe().id;
                if (b[a]) {
                    var c = b[a],
                        e = c.videoPlayer;
                    "sound" !== c.options.style && e.mute();
                    c.parent.classList.remove("loading");
                    c.parent.classList.add("loaded");
                    this._isFirstSlide(a) && "sound" !== c.options.style && e.playVideo();
                }
            },
            _isFirstSlide: function (a) {
                return this.cache.mainSlider.querySelector(".starting-slide #" + a);
            },
            youtubePlayerStateChange: function (a) {
                var c = a.target.getIframe().id;
                c = b[c];
                switch (a.data) {
                    case -1:
                        c.attemptedToPlay && c.parent.classList.add("video-interactable");
                        break;
                    case 0:
                        c && "true" === c.options.loop && c.videoPlayer.playVideo();
                        break;
                    case 3:
                        c.attemptedToPlay = !0;
                }
            },
            initMp4Video: function (a) {
                b[a.id] = { id: a.id, type: "mp4" };
                this._isFirstSlide(a.id) && this.playMp4Video(a.id);
            },
            stopVideos: function () {
                var a;
                for ([, a] of Object.entries(b)) a.videoPlayer ? "function" === typeof a.videoPlayer.stopVideo && a.videoPlayer.stopVideo() : "mp4" === a.type && this.stopMp4Video(a.id);
            },
            _getVideoType: function (a) {
                return a.getAttribute("data-video-type");
            },
            _getVideoDivId: function (a) {
                return a.id;
            },
            playMp4Video: function (a) {
                var c = this.container.querySelector("#" + a);
                a = c.play();
                void 0 !== a &&
                    a
                        .then(function () {})
                        .catch(function (e) {
                            c.setAttribute("controls", "");
                            c.closest(".product__video-wrapper").setAttribute("data-video-style", "unmuted");
                        });
            },
            stopMp4Video: function (a) {
                (a = this.container.querySelector("#" + a)) && "function" === typeof a.pause && a.pause();
            },
            initImageZoom: function () {
                var a = this.container.querySelector(this.selectors.imageContainer);
                a &&
                    (new theme.Photoswipe(a, this.sectionId),
                    a.addEventListener(
                        "photoswipe:afterChange",
                        function (c) {
                            this.flickity && this.flickity.goToSlide(c.detail.index);
                        }.bind(this)
                    ));
            },
            getThumbIndex: function (a) {
                return a.dataset.index;
            },
            updateVariantImage: function (a) {
                a = a.detail.variant;
                theme.Images.getSizedImageUrl(a.featured_media.preview_image.src, this.settings.imageSize);
                a = this.container.querySelector('.product__thumb[data-id="' + a.featured_media.id + '"]');
                a = this.getThumbIndex(a);
                "undefined" !== typeof a && this.flickity && this.flickity.goToSlide(a);
            },
            initProductSlider: function (a) {
                if (1 >= this.cache.mainSlider.querySelectorAll(".product-main-slide").length) (a = this.cache.mainSlider.querySelector(".product-main-slide")) && a.classList.add("is-selected");
                else {
                    this.flickity && "function" === typeof this.flickity.destroy && this.flickity.destroy();
                    if (!a) {
                        var c = this.cache.mainSlider.querySelector(".starting-slide");
                        this.settings.currentSlideIndex = this._slideIndex(c);
                    }
                    c = {
                        adaptiveHeight: !0,
                        avoidReflow: !0,
                        initialIndex: this.settings.currentSlideIndex,
                        childNav: this.cache.thumbSlider,
                        childNavScroller: this.cache.thumbScroller,
                        childVertical: "beside" === this.cache.thumbSlider.dataset.position,
                        pageDots: !0,
                        wrapAround: !0,
                        callbacks: { onInit: this.onSliderInit.bind(this), onChange: this.onSlideChange.bind(this) },
                    };
                    this.settings.imageSetName && ((a = this.imageSetArguments(a)), (c = Object.assign({}, c, a)), this.updateImageSetThumbs(c.imageSet));
                    this.flickity = new theme.Slideshow(this.cache.mainSlider, c);
                }
            },
            onSliderInit: function (a) {
                this.settings.imageSetName && this.prepMediaOnSlide(a);
            },
            onSlideChange: function (a) {
                if (this.flickity) {
                    var c = this.cache.mainSlider.querySelector('.product-main-slide[data-index="' + this.settings.currentSlideIndex + '"]'),
                        e = this.settings.imageSetName ? this.cache.mainSlider.querySelectorAll(".flickity-slider .product-main-slide")[a] : this.cache.mainSlider.querySelector('.product-main-slide[data-index="' + a + '"]');
                    c.setAttribute("tabindex", "-1");
                    e.setAttribute("tabindex", 0);
                    this.stopMediaOnSlide(c);
                    this.prepMediaOnSlide(e);
                    this.settings.currentSlideIndex = a;
                }
            },
            stopMediaOnSlide(a) {
                var c = a.querySelector(".product__video");
                if (c) {
                    var e = this._getVideoType(c);
                    c = this._getVideoDivId(c);
                    if ("youtube" === e) {
                        if (b[c].videoPlayer) {
                            b[c].videoPlayer.stopVideo();
                            return;
                        }
                    } else if ("mp4" === e) {
                        this.stopMp4Video(c);
                        return;
                    }
                }
                (a = a.querySelector(this.selectors.media)) && a.dispatchEvent(new CustomEvent("mediaHidden", { bubbles: !0, cancelable: !0 }));
            },
            prepMediaOnSlide(a) {
                var c = a.querySelector(".product__video");
                if (c) {
                    this.flickity.reposition();
                    var e = this._getVideoType(c);
                    c = this._getVideoDivId(c);
                    if ("youtube" === e) {
                        if (b[c].videoPlayer && "sound" !== b[c].options.style) {
                            b[c].videoPlayer.playVideo();
                            return;
                        }
                    } else "mp4" === e && this.playMp4Video(c);
                }
                if ((e = a.querySelector(this.selectors.media)))
                    e.dispatchEvent(new CustomEvent("mediaVisible", { bubbles: !0, cancelable: !0 })),
                        a.querySelector(".shopify-model-viewer-ui__button").setAttribute("tabindex", 0),
                        a.querySelector(".product-single__close-media").setAttribute("tabindex", 0);
            },
            _slideIndex: function (a) {
                return a.getAttribute("data-index");
            },
            openModalProduct: function () {
                var a = !1;
                this.settings.modalInit
                    ? (a = !0)
                    : ((this.blocksHolder = this.container.querySelector("[data-blocks-holder]")),
                      fetch(this.blocksHolder.dataset.url)
                          .then(function (c) {
                              return c.text();
                          })
                          .then(
                              function (c) {
                                  var e = new DOMParser().parseFromString(c, "text/html").querySelector("[data-product-blocks]");
                                  e.querySelectorAll("[id]").forEach((g) => {
                                      var h = g.getAttribute("id");
                                      g.setAttribute("id", h + "-modal");
                                      (g = e.querySelector(`[for="${h}"]`)) && g.setAttribute("for", h + "-modal");
                                      (g = e.querySelector(`[aria-controls="${h}"]`)) && g.setAttribute("aria-controls", h + "-modal");
                                  });
                                  var f = e.querySelector(this.selectors.form).getAttribute("id");
                                  e.querySelectorAll("[form]").forEach((g) => {
                                      g.setAttribute("form", f);
                                  });
                                  this.blocksHolder.innerHTML = "";
                                  this.blocksHolder.append(e);
                                  this.blocksHolder.classList.add("product-form-holder--loaded");
                                  this.cacheElements();
                                  this.formSetup();
                                  this.updateModalProductInventory();
                                  Shopify && Shopify.PaymentButton && Shopify.PaymentButton.init();
                                  theme.collapsibles.init(this.container);
                                  document.dispatchEvent(new CustomEvent("quickview:loaded", { detail: { productId: this.sectionId } }));
                              }.bind(this)
                          ),
                      this.productSetup(),
                      this.videoSetup(),
                      this.settings.imageSetName
                          ? this.variants
                              ? this.initProductSlider()
                              : document.addEventListener(
                                    "quickview:loaded",
                                    function (c) {
                                        c.detail.productId === this.sectionId && this.initProductSlider();
                                    }.bind(this)
                                )
                          : this.initProductSlider(),
                      this.customMediaListners(),
                      this.addIdToRecentlyViewed(),
                      (this.settings.modalInit = !0));
                AOS.refreshHard();
                document.dispatchEvent(new CustomEvent("quickview:open", { detail: { initialized: a, productId: this.sectionId } }));
            },
            updateModalProductInventory: function () {
                window.inventories = window.inventories || {};
                this.container.querySelectorAll(".js-product-inventory-data").forEach((a) => {
                    var c = a.dataset.productId;
                    window.inventories[c] = {};
                    a.querySelectorAll(".js-variant-inventory-data").forEach((e) => {
                        window.inventories[c][e.dataset.id] = { quantity: e.dataset.quantity, policy: e.dataset.policy, incoming: e.dataset.incoming, next_incoming_date: e.dataset.date };
                    });
                });
            },
            closeModalProduct: function () {
                this.stopVideos();
            },
            initModelViewerLibraries: function () {
                var a = this.container.querySelectorAll(this.selectors.media);
                1 > a.length || theme.ProductMedia.init(a, this.sectionId);
            },
            initShopifyXrLaunch: function () {
                document.addEventListener(
                    "shopify_xr_launch",
                    function () {
                        this.container.querySelector(this.selectors.productMediaWrapper + ":not(." + self.classes.hidden + ")").dispatchEvent(new CustomEvent("xrLaunch", { bubbles: !0, cancelable: !0 }));
                    }.bind(this)
                );
            },
            customMediaListners: function () {
                document.querySelectorAll(this.selectors.closeMedia).forEach((c) => {
                    c.addEventListener(
                        "click",
                        function () {
                            var e = this.cache.mainSlider.querySelector(".is-selected").querySelector(this.selectors.media);
                            e && e.dispatchEvent(new CustomEvent("mediaHidden", { bubbles: !0, cancelable: !0 }));
                        }.bind(this)
                    );
                });
                var a = this.container.querySelectorAll("model-viewer");
                a.length &&
                    a.forEach((c) => {
                        c.addEventListener(
                            "shopify_model_viewer_ui_toggle_play",
                            function (e) {
                                this.mediaLoaded(e);
                            }.bind(this)
                        );
                        c.addEventListener(
                            "shopify_model_viewer_ui_toggle_pause",
                            function (e) {
                                this.mediaUnloaded(e);
                            }.bind(this)
                        );
                    });
            },
            mediaLoaded: function (a) {
                this.container.querySelectorAll(this.selectors.closeMedia).forEach((c) => {
                    c.classList.remove("hide");
                });
                this.flickity && this.flickity.setDraggable(!1);
            },
            mediaUnloaded: function (a) {
                this.container.querySelectorAll(this.selectors.closeMedia).forEach((c) => {
                    c.classList.add("hide");
                });
                this.flickity && this.flickity.setDraggable(!0);
            },
            onUnload: function () {
                theme.ProductMedia.removeSectionModels(this.sectionId);
                this.flickity && "function" === typeof this.flickity.destroy && this.flickity.destroy();
            },
        });
        return d;
    })();
    theme.RecentlyViewed = (function () {
        function d(a) {
            a &&
                ((this.container = a),
                (this.sectionId = this.container.getAttribute("data-section-id")),
                (this.namespace = ".recently-viewed" + this.sectionId),
                (this.gridItemWidth = this.container.getAttribute("data-grid-item-class")),
                (this.rowOf = this.container.getAttribute("data-row-of")),
                theme.initWhenVisible({ element: this.container, callback: this.init.bind(this), threshold: 600 }));
        }
        var b = !1;
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                if (!b)
                    if (((b = !0), 0 === Object.keys(theme.recentlyViewed.recent).length && theme.recentlyViewed.recent.constructor === Object)) this.container.classList.add("hide");
                    else {
                        this.outputContainer = document.getElementById("RecentlyViewed-" + this.sectionId);
                        this.handle = this.container.getAttribute("data-product-handle");
                        var a = [];
                        Object.keys(theme.recentlyViewed.recent).forEach(
                            function (c) {
                                "undefined" !== c && a.push(this.getProductInfo(c));
                            }.bind(this)
                        );
                        Promise.all(a).then(
                            function (c) {
                                this.setupOutput(c);
                                this.captureProductDetails(c);
                            }.bind(this)
                        );
                    }
            },
            getProductInfo: function (a) {
                return new Promise(function (c, e) {
                    theme.recentlyViewed.productInfo.hasOwnProperty(a)
                        ? c(theme.recentlyViewed.productInfo[a])
                        : fetch("/products/" + a + ".js")
                              .then(function (f) {
                                  return f.text();
                              })
                              .then(function (f) {
                                  c(f);
                              });
                });
            },
            setupOutput: function (a) {
                var c = [],
                    e = this.container.getAttribute("data-recent-count"),
                    f = 0;
                Object.keys(a).forEach(
                    function (g) {
                        if (a[g] && ((g = JSON.parse(a[g])), g.handle !== this.handle && "undefined" != typeof g.handle)) {
                            f++;
                            g.url = theme.recentlyViewed.recent[g.handle] ? theme.recentlyViewed.recent[g.handle].url : g.url;
                            g.image_responsive_url = theme.recentlyViewed.recent[g.handle].featuredImage;
                            g.image_aspect_ratio = theme.recentlyViewed.recent[g.handle].aspectRatio;
                            var h = g.variants[0];
                            if (h && h.unit_price) {
                                var m = "";
                                h.unit_price_measurement && (1 != h.unit_price_measurement.reference_value && (m += h.unit_price_measurement.reference_value + " "), (m += h.unit_price_measurement.reference_unit));
                                g.unit_price = theme.Currency.formatMoney(h.unit_price);
                                "" != m && (g.unit_price += "/" + m);
                            }
                            c.unshift(g);
                        }
                    }.bind(this)
                );
                0 === c.length ? this.container.classList.add("hide") : ((e = theme.buildProductGridItem(c.slice(0, e), this.gridItemWidth, this.rowOf)), (this.outputContainer.innerHTML = e), AOS && AOS.refreshHard());
            },
            captureProductDetails: function (a) {
                for (var c = 0; c < a.length; c++) {
                    var e = a[c];
                    theme.recentlyViewed.productInfo[e.handle] = e;
                }
                theme.config.hasSessionStorage && sessionStorage.setItem("recent-products", JSON.stringify(theme.recentlyViewed.productInfo));
            },
            onUnload: function () {
                b = !1;
            },
        });
        return d;
    })();
    theme.Testimonials = (function () {
        function d(a) {
            this.container = a;
            this.timeout;
            var c = a.getAttribute("data-section-id");
            this.slideshow = a.querySelector("#Testimonials-" + c);
            this.namespace = ".testimonial-" + c;
            this.slideshow && theme.initWhenVisible({ element: this.container, callback: this.init.bind(this), threshold: 600 });
        }
        var b = { adaptiveHeight: !0, avoidReflow: !0, pageDots: !0, prevNextButtons: !1 };
        d.prototype = Object.assign({}, d.prototype, {
            init: function () {
                3 >= this.slideshow.dataset.count && (b.wrapAround = !1);
                this.flickity = new theme.Slideshow(this.slideshow, b);
                2 < this.slideshow.dataset.count &&
                    (this.timeout = setTimeout(
                        function () {
                            this.flickity.goToSlide(1);
                        }.bind(this),
                        1e3
                    ));
            },
            onUnload: function () {
                this.flickity && "function" === typeof this.flickity.destroy && this.flickity.destroy();
            },
            onDeselect: function () {
                this.flickity && "function" === typeof this.flickity.play && this.flickity.play();
            },
            onBlockSelect: function (a) {
                a = this.slideshow.querySelector(".testimonials-slide--" + a.detail.blockId);
                a = parseInt(a.dataset.index);
                clearTimeout(this.timeout);
                this.flickity && "function" === typeof this.flickity.pause && (this.flickity.goToSlide(a), this.flickity.pause());
            },
            onBlockDeselect: function () {
                this.flickity && "function" === typeof this.flickity.play && this.flickity.play();
            },
        });
        return d;
    })();
    theme.isStorageSupported = function (d) {
        if (window.self !== window.top) return !1;
        if ("session" === d) var b = window.sessionStorage;
        "local" === d && (b = window.localStorage);
        try {
            return b.setItem("test", "1"), b.removeItem("test"), !0;
        } catch (a) {
            return !1;
        }
    };
    theme.reinitProductGridItem = function (d) {
        AOS && AOS.refreshHard();
        theme.initQuickShop();
        window.SPR && (SPR.initDomEls(), SPR.loadBadges());
        theme.collapsibles.init();
    };
    theme.config.hasSessionStorage = theme.isStorageSupported("session");
    theme.config.hasLocalStorage = theme.isStorageSupported("local");
    AOS.init({ easing: "ease-out-quad", once: !0, offset: 60, disableMutationObserver: !0 });
    theme.config.hasLocalStorage && ((theme.recentlyViewed.localStorage = window.localStorage.getItem("theme-recent")), theme.recentlyViewed.localStorage && (theme.recentlyViewed.recent = JSON.parse(theme.recentlyViewed.localStorage)));
    theme.recentlyViewed.productInfo = theme.config.hasSessionStorage && sessionStorage["recent-products"] ? JSON.parse(sessionStorage["recent-products"]) : {};
    theme.config.bpSmall = matchMedia(theme.config.mediaQuerySmall).matches;
    matchMedia(theme.config.mediaQuerySmall).addListener(function (d) {
        d.matches ? ((theme.config.bpSmall = !0), document.dispatchEvent(new CustomEvent("matchSmall"))) : ((theme.config.bpSmall = !1), document.dispatchEvent(new CustomEvent("unmatchSmall")));
    });
    theme.initGlobals = function () {
        theme.collapsibles.init();
        theme.videoModal();
    };
    (function (d) {
        "loading" != document.readyState ? d() : document.addEventListener("DOMContentLoaded", d);
    })(function () {
        theme.sections = new theme.Sections();
        theme.sections.register("slideshow-section", theme.SlideshowSection);
        theme.sections.register("header", theme.HeaderSection);
        theme.sections.register("product", theme.Product);
        theme.sections.register("blog", theme.Blog);
        theme.sections.register("password-header", theme.PasswordHeader);
        theme.sections.register("photoswipe", theme.Photoswipe);
        theme.sections.register("product-recommendations", theme.Recommendations);
        theme.sections.register("background-image", theme.BackgroundImage);
        theme.sections.register("testimonials", theme.Testimonials);
        theme.sections.register("video-section", theme.VideoSection);
        theme.sections.register("map", theme.Maps);
        theme.sections.register("footer-section", theme.FooterSection);
        theme.sections.register("store-availability", theme.StoreAvailability);
        theme.sections.register("recently-viewed", theme.RecentlyViewed);
        theme.sections.register("newsletter-popup", theme.NewsletterPopup);
        theme.sections.register("collection-header", theme.CollectionHeader);
        theme.sections.register("collection-grid", theme.Collection);
        theme.initGlobals();
        theme.initQuickShop();
        theme.rteInit();
        if (document.body.classList.contains("template-cart")) {
            var d = document.getElementById("CartPageForm");
            d && new theme.CartForm(d);
        }
        theme.settings.predictiveSearch && theme.predictiveSearch.init();
        theme.settings.isCustomerTemplate && theme.customerTemplates();
        document.dispatchEvent(new CustomEvent("page:loaded"));
    });
})();
